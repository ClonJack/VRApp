//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Project/Bundles/Infrastructure/InputData/PlayerInputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace UnrealTeam.VR.Input
{
    public partial class @PlayerInputMap: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputMap()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputMap"",
    ""maps"": [
        {
            ""name"": ""XRI Head"",
            ""id"": ""9532c013-18b6-4fc7-8331-4c29a89f48db"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""3836e6ce-a7d9-4f1b-822e-fbb508599ec8"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraLook"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f8716cbb-91ec-4b02-90cd-aa6e4bef5841"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lock Camera"",
                    ""type"": ""Button"",
                    ""id"": ""bf433a9a-8b97-4721-8d5d-3564afa0b567"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""6a522957-cf9e-40d8-a629-47d3ad6abc32"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""c0f79155-bb39-49e9-bf1b-f7f26c0b83cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""70c5b9f8-0bdb-4849-a243-02938d236a36"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Position"",
                    ""type"": ""Value"",
                    ""id"": ""9f77e26a-4bcc-453b-9b3b-a1e1c1e5a564"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""ea6cfbdd-1133-4cb8-a012-b509eabf571a"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""a1024468-3fb7-4901-87cb-2de1e3e95c23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""a06329ee-bf64-4298-ba74-2113b188a36a"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10d91413-6087-4951-b627-64c44c4fa940"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6428759-cc4b-4f37-9e9d-bdcb4a8b5921"",
                    ""path"": ""<HandheldARInputDevice>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df4e2070-826c-41e8-9e16-0589c7d79534"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3807b2e-d4ec-441d-9af2-6e553664195e"",
                    ""path"": ""<HandheldARInputDevice>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""f961cf44-973a-4a8a-a00e-1e0b93b0c026"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""07868330-c9a9-4fb3-b14a-8128282c9bb3"",
                    ""path"": ""<EyeGaze>/pose/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""d183bf82-d5f1-4cac-89c6-5bee4a6d320c"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""f804e29e-06c3-4bba-a658-9d025c7e359e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""b6cd886f-e513-4a2b-82f8-d7c610359f35"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""78d4139d-269f-48eb-9412-43c16f9bda57"",
                    ""path"": ""<EyeGaze>/pose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""a2e1f14f-26f2-42af-a875-49a87a336d17"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""085bf75b-d382-4a29-bdd2-c83570409fd5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Integer Fallback"",
                    ""id"": ""f6023822-e1ce-4aae-b445-9de967f646ce"",
                    ""path"": ""IntegerFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""cf82bf50-214a-4861-a69a-c152757c4f49"",
                    ""path"": ""<EyeGaze>/pose/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""a8641510-a4bc-4c23-b9c6-937bb9fcf152"",
                    ""path"": ""<XRHMD>/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""ba742cad-22eb-4d3e-bb32-ae5410606d2c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""befde496-6a97-4ac3-ba18-b2c2223e9590"",
                    ""path"": ""<XRHMD>/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51bb66a3-4ad5-4fab-9091-00ef643e0a8c"",
                    ""path"": ""<XRHMD>/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Button Fallback"",
                    ""id"": ""60ab19eb-7b51-4779-8b7c-a5e7009933fe"",
                    ""path"": ""ButtonFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""a4ed9429-a5ea-43bf-ae54-bd40ba731a31"",
                    ""path"": ""<EyeGaze>/pose/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""971baf47-d34b-4e76-b074-dc7fe5abe576"",
                    ""path"": ""<XRHMD>/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""b7ef8184-6d0d-42a5-a024-321e39ca8b57"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f3f140ee-a500-4c70-a853-25fea570b786"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""CameraLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c04bd66e-aaba-42f5-b0fc-10adcd98bfdf"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller;Continuous Move;Noncontinuous Move"",
                    ""action"": ""Lock Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e0f6a6e-81ab-46f9-813d-9440cb080fb0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller;Continuous Move;Noncontinuous Move"",
                    ""action"": ""Lock Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI LeftHand"",
            ""id"": ""6f697e3e-c344-4969-b9a6-ffaba42dfdad"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""e7db3a99-c7cf-49dd-944b-52b5bd96ef2f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""b4c1ab10-5560-4eb4-959e-ffe24df1c82e"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""087cc53f-988c-4eec-9dd6-9e255d83b212"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""0f940c93-6e47-40bf-b77e-e5eabc70d745"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4f148ba0-147d-476d-92cf-1afa846b8eea"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim Position"",
                    ""type"": ""Value"",
                    ""id"": ""a2d724d4-3600-4554-ac15-b4932f98a24d"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""7b0ea1b1-38f9-4ece-a30b-4b60ce09c231"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Flags"",
                    ""type"": ""Value"",
                    ""id"": ""efcb3632-667f-44cc-9d8c-c397dceacedd"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Position"",
                    ""type"": ""Value"",
                    ""id"": ""72f7b033-d598-4a88-b80b-f7f8a1236db4"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Position"",
                    ""type"": ""Value"",
                    ""id"": ""e849ce39-703a-45ce-8802-263871bb8f69"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""0481dde0-10f5-4e64-a798-7dbd2b061702"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Position"",
                    ""type"": ""Value"",
                    ""id"": ""5e2cc8fb-c5e7-434e-82f4-fe96e8ec40c0"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""7ec63ccd-3d39-4e30-8912-6059d21e7b02"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""913ced4e-67dc-41a4-b066-487181cc2db2"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""6c157670-e6da-4c35-a36f-ed50828f9a24"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""5486d771-9030-45d6-9e7d-772da968c1f7"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""d4511746-06da-4e6f-a649-15d193ea802e"",
                    ""path"": ""<XRHandDevice>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""059aa6e9-361a-4270-b7a6-af0f20bd053c"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""e8c8d1b2-ed90-43d4-bd00-116a96494be8"",
                    ""path"": ""<XRController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""8bc32bc4-c3da-447f-8bcb-66317d1db13c"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""377ec97e-ad10-4d9d-8d05-3874fcee2d83"",
                    ""path"": ""<XRHandDevice>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""aeb657b0-bf70-4b5d-bab6-746ab1029ea4"",
                    ""path"": ""<XRController>{LeftHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68ae3697-74cc-4c95-85c3-8302ce9fb6c3"",
                    ""path"": ""<XRController>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e99a51b5-6eba-4267-bbd1-fa71cc78cf3e"",
                    ""path"": ""<XRHandDevice>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7416144-76cc-4965-9eaf-daadd414f629"",
                    ""path"": ""<MetaAimHand>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27247828-3c22-4f70-a8c0-1eca322f9bfd"",
                    ""path"": ""<MetaAimHand>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4006ad01-ee4a-454c-bb4a-d7e341d31a2e"",
                    ""path"": ""<XRHandDevice>{LeftHand}/pinchPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f87a28e4-5274-42e3-a9a9-177ad9cbab8d"",
                    ""path"": ""<XRHandDevice>{LeftHand}/pokePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6d986ab-c38c-4eb6-ae70-0a1d05ffb6da"",
                    ""path"": ""<XRHandDevice>{LeftHand}/pokeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f383126-c0ab-4959-8e38-3807111b59b3"",
                    ""path"": ""<XRController>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73161166-8813-49bc-b97c-79a55792034e"",
                    ""path"": ""<XRHandDevice>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e2530ff-9563-43c4-aad1-99015a0d314b"",
                    ""path"": ""<MetaAimHand>{LeftHand}/aimFlags"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Flags"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73b62811-06f2-461a-a342-0c415d0ea0fa"",
                    ""path"": ""<XRHandDevice>{LeftHand}/gripPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52545611-28e2-485c-a0b5-05c8774786cc"",
                    ""path"": ""<XRHandDevice>{LeftHand}/gripRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI LeftHand Interaction"",
            ""id"": ""56353f1c-6d8e-4062-b83d-5dcc12dabdca"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""93b76d14-088b-4d63-b2b4-2f62dd11070c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Value"",
                    ""type"": ""Value"",
                    ""id"": ""cb0cfbbd-8a39-4894-8094-1d822a688278"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""356ce6ff-0296-4f69-bbf2-606eaf765764"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Value"",
                    ""type"": ""Value"",
                    ""id"": ""121a8545-636c-45f7-988a-e4d12637c520"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Press"",
                    ""type"": ""Button"",
                    ""id"": ""91440f11-8df8-440c-9b2f-6ffd5d90fa61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UI Press Value"",
                    ""type"": ""Value"",
                    ""id"": ""3defad30-04c4-491e-9fb0-463e6fb1bf0c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""b8d15f5e-eaee-479f-a938-f9f7adad3490"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2(invertY=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""21f9d961-2f09-41bc-aea8-8d8c3bc73fa6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Translate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""342733cb-cf95-4dad-b210-d12b0082ecdf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scale Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""422614b8-bbf6-40e8-a39b-3bacf31daa73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scale Delta"",
                    ""type"": ""Value"",
                    ""id"": ""5b1170bc-4874-4ea9-b6d5-75ac3dbfa17c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Сalibration "",
                    ""type"": ""Button"",
                    ""id"": ""309f4f7a-49a3-40e2-8135-ed3ba54496bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a4f2ee02-4904-4689-a461-d54bd6a84fa7"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fa53886-a918-4d4c-bbf9-cca155f14d9c"",
                    ""path"": ""<MetaAimHand>{LeftHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42a71cc4-fada-486d-9dcc-7d9cfd8d2227"",
                    ""path"": ""<XRController>{LeftHand}/{Grip}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""857eb365-acb6-4e0c-a6c6-150efebadf4e"",
                    ""path"": ""<MetaAimHand>{LeftHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a75319d-448f-4e93-abed-40210e305113"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0034c774-4ecc-43ac-880a-e60ee17cfd02"",
                    ""path"": ""<XRController>{LeftHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Activate Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4584eabe-83b6-4cab-adac-f6a460e69270"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66d5db84-edbe-4acf-800c-71412d5323bd"",
                    ""path"": ""<MetaAimHand>{LeftHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""334f8bb3-2de8-4616-b7b6-0ceebf153f89"",
                    ""path"": ""<XRController>{LeftHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc519225-4f7d-441e-a4f2-433d92602e31"",
                    ""path"": ""<MetaAimHand>{LeftHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9773fa0-d1e5-40ef-8934-6f3328765492"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(y=0),StickDeadzone"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20b9a274-95d3-4fd9-aa06-6b9de5192163"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0),StickDeadzone"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7aa937a6-2044-4368-90b8-756561f8a804"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3aa0a59e-1651-4803-b5ce-5ee373425a81"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Scale Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9e6e074-6cc5-416e-a6c1-f1ec5a42f7d7"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0),StickDeadzone"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Scale Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad4a9470-e078-4f04-be9a-81d3704ec653"",
                    ""path"": ""<OculusTouchController>{RightHand}/primaryButton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Сalibration "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf05f8be-30ff-4c08-b227-0b197d13231e"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25514fee-2a41-40fb-908d-937f0309ba91"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI LeftHand Locomotion"",
            ""id"": ""cf0d2fd1-2754-431f-b9a9-61a949a52517"",
            ""actions"": [
                {
                    ""name"": ""Teleport Select"",
                    ""type"": ""Value"",
                    ""id"": ""897d6d0d-71f4-4042-bae9-74f1c434ae53"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Activate"",
                    ""type"": ""Value"",
                    ""id"": ""1d6f8c5b-1c64-4a1c-818b-a555b966855f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""1f1bd8b3-4556-4927-9725-755823eac4bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Direction"",
                    ""type"": ""Value"",
                    ""id"": ""1a97423b-423e-4208-87f2-68f2e676f303"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""0da2c613-2bdf-46a2-8b44-f42cc61ae621"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4445abc6-39d1-43c7-ad15-a981d3dcfb00"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab Move"",
                    ""type"": ""Button"",
                    ""id"": ""69d0b85f-02fe-46e7-a0d5-6aa69151fd91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Snap Turn"",
                    ""type"": ""Value"",
                    ""id"": ""2fbbc176-0250-4968-931f-6e4a1113bff8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6a220ccc-2650-419f-a97a-f3c539773e50"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=-1,sweepBehavior=3)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6442212-c09c-49d2-901c-6d51e06ce655"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Mode Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a38e1fed-082d-4a44-b5a0-083d9872ec72"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""323c6145-26a1-4824-8231-6331951a5915"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74444096-beab-4e5a-84a3-f95dea55c7f9"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6ca8162-8e89-4190-90e4-e87e50c3fea8"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b512dad7-d5df-47fe-b656-b8982844a7dd"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grab Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7fb12916-a0a9-4fb6-b8c8-0c0eca7d1b61"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Snap Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""f058ce58-e406-4e47-8b6a-70c5a7c08632"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""711310cb-9fcc-4860-a18e-a1bb9f7ba350"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0d02bb5a-1d81-429e-92f5-71cf7e9deabb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d334b2d1-3c6f-47f0-9bf8-14b8ce8f256f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6462b9dd-a23d-4a98-b0be-00e51c8ed266"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""XRI RightHand"",
            ""id"": ""263d42eb-16db-46bc-83bb-0f81fd02665d"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""73573b08-3a92-42a1-852c-9a37d26b7da8"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""ea652720-8e0d-40cf-8bd8-985df626b268"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""9e705f61-231f-4bf2-ae2d-8b440e5e7708"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""d2429920-31e5-49db-8394-67e85e6811ba"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""940a5b1d-5ea7-4013-90ee-a751a845608f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim Position"",
                    ""type"": ""Value"",
                    ""id"": ""4b576615-7496-49c5-b28c-abf85ddd455b"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""334368f2-ffae-41f7-b5e6-768190f2f0ac"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Flags"",
                    ""type"": ""Value"",
                    ""id"": ""c9130d0c-742a-44af-98ff-7ed6b205cf44"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Position"",
                    ""type"": ""Value"",
                    ""id"": ""9c897315-21a1-4da7-bf36-998fe81f7c5d"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Position"",
                    ""type"": ""Value"",
                    ""id"": ""965c5905-27db-4477-b10d-2a1693282688"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""7b77f1a7-d3bc-4b53-aafe-28ff7b62093d"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Position"",
                    ""type"": ""Value"",
                    ""id"": ""4aaf96f0-c2f4-49f1-97de-a35ee182f027"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""4a945098-88ba-4bc9-9cd1-328e12951fb5"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""c7a22375-7b35-41f6-a726-9b1ea2e6d1c3"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""e5ba91da-7553-4ec0-aeef-35da74024557"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""2044d54f-1da1-43f1-9f54-5cc0345d8880"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""5482b3a9-c2f3-4954-9a54-7b36168a4d07"",
                    ""path"": ""<XRHandDevice>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""f69bf199-a516-4b9b-aab3-65f9138a84a3"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""92a62d63-6b77-4798-afbe-790df4894302"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""dcce8c0e-9d9e-4576-8ba4-32992b2fa844"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""a0999b77-1cf1-4479-a620-f06043d103ff"",
                    ""path"": ""<XRHandDevice>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f9688413-3ef9-4623-bfc4-ffd77d9a1500"",
                    ""path"": ""<XRController>{RightHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""025f6ae2-538c-4d06-a827-cd30e001c9c6"",
                    ""path"": ""<XRController>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcf305df-5755-4bd6-a37b-69f4eb36ca37"",
                    ""path"": ""<XRHandDevice>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c625b7c-ef2e-4814-afb0-7a386313f7d1"",
                    ""path"": ""<MetaAimHand>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9572ab0-caab-4b90-bc06-c0d055afac6f"",
                    ""path"": ""<MetaAimHand>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99f73783-eb95-4092-b306-8eddc7f0ff73"",
                    ""path"": ""<XRHandDevice>{RightHand}/pinchPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bad0c8d-a545-404d-a341-425dcf7476a7"",
                    ""path"": ""<XRHandDevice>{RightHand}/pokePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a499f588-1aaf-47cd-ae45-5fd923e678a6"",
                    ""path"": ""<XRHandDevice>{RightHand}/pokeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9020ae79-716f-46e6-8c14-18617e8db7e9"",
                    ""path"": ""<XRController>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1703c769-a214-41fc-ab96-e4689567d1e6"",
                    ""path"": ""<XRHandDevice>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e414aaf-8137-4afa-b5d8-6f402e724512"",
                    ""path"": ""<MetaAimHand>{RightHand}/aimFlags"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Flags"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3502c416-cf6a-4c34-a121-ddbe53db3146"",
                    ""path"": ""<XRHandDevice>{RightHand}/gripPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca9f55f2-1b76-4943-a995-1f56215be918"",
                    ""path"": ""<XRHandDevice>{RightHand}/gripRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI RightHand Interaction"",
            ""id"": ""c034af10-c7d3-4077-b773-d87a29f8981c"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""4928b967-e6ac-498a-b41b-7da4f553dd4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Value"",
                    ""type"": ""Value"",
                    ""id"": ""a31c0b66-ee20-48e9-b73e-11d999946a3a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""28c30d41-574d-4b5a-ae74-df2b613d5fe6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Value"",
                    ""type"": ""Value"",
                    ""id"": ""ea9883bb-076c-4bf2-9dd4-60295800fe5c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Press"",
                    ""type"": ""Button"",
                    ""id"": ""0e6a17f2-6902-459f-ac66-44d2669f8e4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UI Press Value"",
                    ""type"": ""Value"",
                    ""id"": ""d92a62a9-2eca-44dd-b884-e02f5123dca7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""643e84fc-98d0-4236-86cb-f0e4c3fadfda"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2(invertY=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""3736484d-ee79-4953-bc46-bcc726823c0d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Translate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""9d0f5c14-40b0-4683-9b0f-9f579a3f94e5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scale Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""3f31b8b0-cb27-4b03-bb2d-28780bec0b5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scale Delta"",
                    ""type"": ""Value"",
                    ""id"": ""6ba76767-4c13-44db-b1f6-e1217cacad8a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""6dcd469a-0c22-4e95-8108-04d48ab60806"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AnimationWheel"",
                    ""type"": ""Button"",
                    ""id"": ""2acd4020-3f4c-4ffc-b9e2-0d9ac6a054f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0388f396-5915-4e2a-838a-c7daed51cdbc"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4827943-b9e1-4d1b-bfac-b8c87fc869bc"",
                    ""path"": ""<MetaAimHand>{RightHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8c38c64-e410-4e5d-90e3-304d6d01e23d"",
                    ""path"": ""<XRController>{RightHand}/{Grip}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fada3cea-c8cc-44df-8744-7a3caa0bb108"",
                    ""path"": ""<MetaAimHand>{RightHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b53e1ba-26a8-4bf7-bae6-035eb4379eee"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b7a981b-ad01-44be-9359-f8eea7a1aae8"",
                    ""path"": ""<XRController>{RightHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Activate Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""591edd50-47fd-44cf-a2af-e764ff493409"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""367734df-37dd-4cdc-83f6-a7c1630795ba"",
                    ""path"": ""<MetaAimHand>{RightHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8f8fee3-7ed0-4653-96e2-a78c8d121755"",
                    ""path"": ""<XRController>{RightHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae1dd46b-b8b3-4951-b2f1-ded86b68e583"",
                    ""path"": ""<MetaAimHand>{RightHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d40ca67-9a32-43b5-9842-6b24dc4a00fc"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(y=0),StickDeadzone"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f43ec4d4-4645-4f29-af72-fe7ec5fc06fd"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0),StickDeadzone"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d309a9c-20e7-43a5-8884-31531c7ad34c"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c408ea45-4938-46c9-bc16-06421a9f5cd5"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Scale Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5dfbb85-15b7-4892-93b4-97a2713a7cc3"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0),StickDeadzone"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Scale Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4c6b5f1-85b2-48af-afc4-3e0a20e90ba1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aff7f9a9-7ff3-478d-8fa1-bf931694fbe3"",
                    ""path"": ""<OculusTouchController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f0fce85-a2cd-40e4-8b40-111e6b7658cc"",
                    ""path"": ""<OculusTouchController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""AnimationWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI RightHand Locomotion"",
            ""id"": ""870ed8ed-a79d-4a9c-ac44-df4aef147b33"",
            ""actions"": [
                {
                    ""name"": ""Teleport Select"",
                    ""type"": ""Value"",
                    ""id"": ""2d87503f-dbfe-4442-951b-57bd1e664f86"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Activate"",
                    ""type"": ""Value"",
                    ""id"": ""545a4908-513f-4f63-9493-7285fcf54ba4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""508ab013-c72c-4362-8e54-d1d4c8d424d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Direction"",
                    ""type"": ""Value"",
                    ""id"": ""7d52105e-9ca7-46ec-bb19-05c284c1f26d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""486b3325-1560-4b9a-ae82-67c89c16a4b2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""2eb440f7-fe2f-430c-ac8a-f1d875068ea3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab Move"",
                    ""type"": ""Button"",
                    ""id"": ""adb65c89-a104-4702-b19f-e4aaa63e3c8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Snap Turn"",
                    ""type"": ""Value"",
                    ""id"": ""7bee0f20-a455-4f2a-926e-04eac7c55669"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2ad58590-5bfe-4947-82eb-e05cbb3cf32f"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=-1,sweepBehavior=3)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9dc14f52-35cc-4be5-a04a-2efef36deb21"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1255389c-6346-43be-bf5c-9095bb859fcc"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a33ccb0-47d9-4495-a357-3cf8f9588b2f"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a61e631-8eb8-4fd7-ba01-00cfbe73435e"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87727520-709c-48e2-8090-15e152af3006"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fce5ca39-944d-41e5-b363-2f9a57f3518b"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grab Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30bbbe6c-8c1d-4109-83c1-a904c00126a8"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Snap Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI UI"",
            ""id"": ""1e4deac7-f1e8-4c5f-b7db-9ba05f2ed85f"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""dbd694ca-945c-4743-8f6d-9ff8d8924743"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""31a2518d-d150-4a80-a856-f034207b30f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""5afcd008-ec39-4f42-a1e1-ea3924c98bcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""eec870a1-40c4-4737-a427-bb7ad24becc4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5c14e82f-6fa8-4fb5-bc0e-3bd490906e21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7e84cec1-8028-4765-9049-82520d5ee953"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""45042131-6989-4d6e-b7c5-3a1fdd0118ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""308d88cf-7f70-4a6b-9c02-3bdfcf01e0ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4d2612a5-d5e4-4a9c-8545-2c141dbe9f6c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbf53328-d5d2-4516-bcbf-7e82df3b775a"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a02a4e3f-e2bb-4f1b-8b59-b8d1d3d55d58"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bbda20c-e9e7-4694-9dfa-e59c398ad7c2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""551f56fe-57ca-4e32-a196-2d732f11d8cc"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89ee72d0-8e55-4696-bd44-751a87715aba"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0dab086-d8ff-4d24-8759-eee7ddd707ee"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90e49278-e99b-46c0-9787-e081c42c886d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""60b732a7-af26-4145-8ad3-ccc252c9de4e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0c300ac2-9272-41d7-bc23-09ce444a908b"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""19f21484-b5f5-4bfd-9fe0-99657042ab8b"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dbbe2ca6-a546-4f43-8ce2-2bca2e463f89"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ff7d8323-0afd-4240-9bd9-5f6cb491a6f9"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""02d993a2-d777-4099-bf6f-61bca4e172db"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f0f8c42b-29e9-4fe4-a56c-585e4e6c7cbe"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b11ec42e-c78a-47f8-a4f9-a8e11a4b9cc1"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f23d10ff-652d-4685-b153-e9e8e187783b"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b39820b9-1f1e-409c-848c-29a81a9d856c"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""93650d4d-eee3-48cf-8d08-ba0f19977c89"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""68cbf670-4b7f-4a5e-aa1d-2ce42e0499b1"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""51fd4254-4b9c-47de-a829-36578acb8c14"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8ada36ea-9ff3-425e-ac89-93717dbf66c6"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""62b67b03-7e7b-4ca5-a1eb-f1260c80883c"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""ae173516-773d-4f06-8a04-8bc9683db8d2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1a63e18d-08b2-4f2f-90ea-920fc5e6a8fb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3630a58b-cffe-414d-bdf4-43ff96075c3d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bcb92447-106f-461f-9aac-11e4f568b11a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a34a41f2-c145-481d-accc-fa67a0954d52"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""70c9ca4b-10ee-4fcd-889e-ad6a1eb78210"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4759cf4e-93b8-4c46-893f-24a7d51568f4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""db519100-e2f7-4814-a61c-e8eda7449f43"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f897a3ad-f1c0-4c39-8100-12cad1d230f7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""907cf567-3e4a-4611-b543-50c96c5493d4"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3524a899-1841-46ae-8ceb-d8a214fe4028"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7189302b-51aa-4e4f-b11e-b1054e1fc5b1"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Touchscreen Gestures"",
            ""id"": ""3ec26d37-5117-4dd4-a9d2-6c00e6521e31"",
            ""actions"": [
                {
                    ""name"": ""Tap Start Position"",
                    ""type"": ""Value"",
                    ""id"": ""7acb7d8b-6d03-4f09-aa93-6bcc6c3791be"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drag Current Position"",
                    ""type"": ""Value"",
                    ""id"": ""f83aff1c-355e-47d1-97c5-a12ac114106e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drag Delta"",
                    ""type"": ""Value"",
                    ""id"": ""fd509ce4-f631-4eee-8213-7ee688363da0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Start Position"",
                    ""type"": ""Value"",
                    ""id"": ""b51734bc-bc08-4f8a-b317-4ae2c1e0242c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Gap"",
                    ""type"": ""Value"",
                    ""id"": ""6ecd7894-b0f2-4b60-a134-ebdaf2657e5e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Gap Delta"",
                    ""type"": ""Value"",
                    ""id"": ""a0129de7-2bae-431c-9a1b-ba1c963aadbf"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Twist Start Position"",
                    ""type"": ""Value"",
                    ""id"": ""d18dec3c-3e6e-47cd-9ca8-3114d0e4e2f9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Twist Delta Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""58bd2fac-18fb-4cbc-a52b-bf93945ceda8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Screen Touch Count"",
                    ""type"": ""Value"",
                    ""id"": ""cb5d9fa2-76ee-4546-bc67-2201ab89fe1a"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""71dd1a0a-fff6-47e7-96d9-837c9aac6298"",
                    ""path"": ""<TouchscreenGestureInputController>/tapStartPosition"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap Start Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""971c2e1b-30f2-48ef-9661-be5136f7f161"",
                    ""path"": ""<TouchscreenGestureInputController>/dragCurrentPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Current Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""bed09129-619a-4c71-b30b-7acc014dd7e5"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Current Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""7f947f53-f922-47a0-bd7c-603233ae8a55"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Current Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""e2469711-c7e0-42a3-bb71-1e57be74553b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Current Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e3a2acf7-0127-465f-981b-d2e63d9b1fcd"",
                    ""path"": ""<TouchscreenGestureInputController>/twistDeltaRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Twist Delta Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f252443-6470-4951-814d-8584ef58fe74"",
                    ""path"": ""<TouchscreenGestureInputController>/fingerCount"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Screen Touch Count"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51b04269-e57d-44fc-94a1-47404c700969"",
                    ""path"": ""<TouchscreenGestureInputController>/dragDelta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d535f6d2-c3d7-48ba-a546-dd6eef9c5df3"",
                    ""path"": ""<TouchscreenGestureInputController>/pinchStartPosition1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Start Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a929978f-bb0e-4fbd-8968-a2af7029b0a2"",
                    ""path"": ""<TouchscreenGestureInputController>/pinchGapDelta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Gap Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b631265-2431-4ea5-9ba2-06a525d85127"",
                    ""path"": ""<TouchscreenGestureInputController>/twistStartPosition1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Twist Start Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""865d68a7-68e6-4f36-a9f0-d957ea5aaf8f"",
                    ""path"": ""<TouchscreenGestureInputController>/pinchGap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Gap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI Calibrate"",
            ""id"": ""586848cb-26c4-4464-8c22-2013a8a87ca8"",
            ""actions"": [
                {
                    ""name"": ""Calibrate"",
                    ""type"": ""Button"",
                    ""id"": ""a12d47ee-96bf-4096-8e82-2af391d672b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""129c0fc8-fccb-498c-a3e9-503e5c7afca6"",
                    ""path"": ""<XRInputV1::Oculus::OculusTouchControllerOpenXR>{RightHand}/primarybutton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller;Noncontinuous Move"",
                    ""action"": ""Calibrate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI Keyboard"",
            ""id"": ""1abc6793-9884-407d-b27e-305fba17e4d9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""862f1c70-82d3-482a-91fb-03473e409907"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""72f253d0-de94-4f43-9bec-eeb385f6642c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Recorder"",
                    ""type"": ""Button"",
                    ""id"": ""27a5b8d1-5e70-4bb5-989c-a1a93d087202"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""24a4f575-7fa6-465a-9bb0-69b6dbdc52f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mute"",
                    ""type"": ""Button"",
                    ""id"": ""efd9c593-c230-4be0-b565-637ea1cbb6ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AnimationWheel"",
                    ""type"": ""Button"",
                    ""id"": ""3f97707c-2a8b-4c2f-a645-20ab928e54bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""92289395-a67e-4d5a-a3b5-57289bb2dbfb"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c01e17a2-8deb-4059-80a7-6fe967697a22"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""611c247e-a254-4d19-ac76-3f0115ccfd87"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a7de7330-803e-4695-859b-b998b37867e7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8fa3b7cf-e259-496d-909a-099e1e508ca5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a6daf202-d8db-48c8-b37e-de220a2ecac8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76b5fbfb-f18b-494e-806d-650d5d1db47b"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Recorder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5b9dba3-69c4-4016-a7ed-132b41c5f868"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74f127e0-e944-4a90-bb2a-040023a76369"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Mute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69b2d811-f763-4bff-9f53-24dfb14acca5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""AnimationWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // XRI Head
            m_XRIHead = asset.FindActionMap("XRI Head", throwIfNotFound: true);
            m_XRIHead_Position = m_XRIHead.FindAction("Position", throwIfNotFound: true);
            m_XRIHead_CameraLook = m_XRIHead.FindAction("CameraLook", throwIfNotFound: true);
            m_XRIHead_LockCamera = m_XRIHead.FindAction("Lock Camera", throwIfNotFound: true);
            m_XRIHead_Rotation = m_XRIHead.FindAction("Rotation", throwIfNotFound: true);
            m_XRIHead_IsTracked = m_XRIHead.FindAction("Is Tracked", throwIfNotFound: true);
            m_XRIHead_TrackingState = m_XRIHead.FindAction("Tracking State", throwIfNotFound: true);
            m_XRIHead_EyeGazePosition = m_XRIHead.FindAction("Eye Gaze Position", throwIfNotFound: true);
            m_XRIHead_EyeGazeRotation = m_XRIHead.FindAction("Eye Gaze Rotation", throwIfNotFound: true);
            m_XRIHead_EyeGazeIsTracked = m_XRIHead.FindAction("Eye Gaze Is Tracked", throwIfNotFound: true);
            m_XRIHead_EyeGazeTrackingState = m_XRIHead.FindAction("Eye Gaze Tracking State", throwIfNotFound: true);
            // XRI LeftHand
            m_XRILeftHand = asset.FindActionMap("XRI LeftHand", throwIfNotFound: true);
            m_XRILeftHand_Position = m_XRILeftHand.FindAction("Position", throwIfNotFound: true);
            m_XRILeftHand_Rotation = m_XRILeftHand.FindAction("Rotation", throwIfNotFound: true);
            m_XRILeftHand_IsTracked = m_XRILeftHand.FindAction("Is Tracked", throwIfNotFound: true);
            m_XRILeftHand_TrackingState = m_XRILeftHand.FindAction("Tracking State", throwIfNotFound: true);
            m_XRILeftHand_HapticDevice = m_XRILeftHand.FindAction("Haptic Device", throwIfNotFound: true);
            m_XRILeftHand_AimPosition = m_XRILeftHand.FindAction("Aim Position", throwIfNotFound: true);
            m_XRILeftHand_AimRotation = m_XRILeftHand.FindAction("Aim Rotation", throwIfNotFound: true);
            m_XRILeftHand_AimFlags = m_XRILeftHand.FindAction("Aim Flags", throwIfNotFound: true);
            m_XRILeftHand_PinchPosition = m_XRILeftHand.FindAction("Pinch Position", throwIfNotFound: true);
            m_XRILeftHand_PokePosition = m_XRILeftHand.FindAction("Poke Position", throwIfNotFound: true);
            m_XRILeftHand_PokeRotation = m_XRILeftHand.FindAction("Poke Rotation", throwIfNotFound: true);
            m_XRILeftHand_GripPosition = m_XRILeftHand.FindAction("Grip Position", throwIfNotFound: true);
            m_XRILeftHand_GripRotation = m_XRILeftHand.FindAction("Grip Rotation", throwIfNotFound: true);
            // XRI LeftHand Interaction
            m_XRILeftHandInteraction = asset.FindActionMap("XRI LeftHand Interaction", throwIfNotFound: true);
            m_XRILeftHandInteraction_Select = m_XRILeftHandInteraction.FindAction("Select", throwIfNotFound: true);
            m_XRILeftHandInteraction_SelectValue = m_XRILeftHandInteraction.FindAction("Select Value", throwIfNotFound: true);
            m_XRILeftHandInteraction_Activate = m_XRILeftHandInteraction.FindAction("Activate", throwIfNotFound: true);
            m_XRILeftHandInteraction_ActivateValue = m_XRILeftHandInteraction.FindAction("Activate Value", throwIfNotFound: true);
            m_XRILeftHandInteraction_UIPress = m_XRILeftHandInteraction.FindAction("UI Press", throwIfNotFound: true);
            m_XRILeftHandInteraction_UIPressValue = m_XRILeftHandInteraction.FindAction("UI Press Value", throwIfNotFound: true);
            m_XRILeftHandInteraction_UIScroll = m_XRILeftHandInteraction.FindAction("UI Scroll", throwIfNotFound: true);
            m_XRILeftHandInteraction_RotateAnchor = m_XRILeftHandInteraction.FindAction("Rotate Anchor", throwIfNotFound: true);
            m_XRILeftHandInteraction_TranslateAnchor = m_XRILeftHandInteraction.FindAction("Translate Anchor", throwIfNotFound: true);
            m_XRILeftHandInteraction_ScaleToggle = m_XRILeftHandInteraction.FindAction("Scale Toggle", throwIfNotFound: true);
            m_XRILeftHandInteraction_ScaleDelta = m_XRILeftHandInteraction.FindAction("Scale Delta", throwIfNotFound: true);
            m_XRILeftHandInteraction_Сalibration = m_XRILeftHandInteraction.FindAction("Сalibration ", throwIfNotFound: true);
            // XRI LeftHand Locomotion
            m_XRILeftHandLocomotion = asset.FindActionMap("XRI LeftHand Locomotion", throwIfNotFound: true);
            m_XRILeftHandLocomotion_TeleportSelect = m_XRILeftHandLocomotion.FindAction("Teleport Select", throwIfNotFound: true);
            m_XRILeftHandLocomotion_TeleportModeActivate = m_XRILeftHandLocomotion.FindAction("Teleport Mode Activate", throwIfNotFound: true);
            m_XRILeftHandLocomotion_TeleportModeCancel = m_XRILeftHandLocomotion.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
            m_XRILeftHandLocomotion_TeleportDirection = m_XRILeftHandLocomotion.FindAction("Teleport Direction", throwIfNotFound: true);
            m_XRILeftHandLocomotion_Turn = m_XRILeftHandLocomotion.FindAction("Turn", throwIfNotFound: true);
            m_XRILeftHandLocomotion_Move = m_XRILeftHandLocomotion.FindAction("Move", throwIfNotFound: true);
            m_XRILeftHandLocomotion_GrabMove = m_XRILeftHandLocomotion.FindAction("Grab Move", throwIfNotFound: true);
            m_XRILeftHandLocomotion_SnapTurn = m_XRILeftHandLocomotion.FindAction("Snap Turn", throwIfNotFound: true);
            // XRI RightHand
            m_XRIRightHand = asset.FindActionMap("XRI RightHand", throwIfNotFound: true);
            m_XRIRightHand_Position = m_XRIRightHand.FindAction("Position", throwIfNotFound: true);
            m_XRIRightHand_Rotation = m_XRIRightHand.FindAction("Rotation", throwIfNotFound: true);
            m_XRIRightHand_IsTracked = m_XRIRightHand.FindAction("Is Tracked", throwIfNotFound: true);
            m_XRIRightHand_TrackingState = m_XRIRightHand.FindAction("Tracking State", throwIfNotFound: true);
            m_XRIRightHand_HapticDevice = m_XRIRightHand.FindAction("Haptic Device", throwIfNotFound: true);
            m_XRIRightHand_AimPosition = m_XRIRightHand.FindAction("Aim Position", throwIfNotFound: true);
            m_XRIRightHand_AimRotation = m_XRIRightHand.FindAction("Aim Rotation", throwIfNotFound: true);
            m_XRIRightHand_AimFlags = m_XRIRightHand.FindAction("Aim Flags", throwIfNotFound: true);
            m_XRIRightHand_PinchPosition = m_XRIRightHand.FindAction("Pinch Position", throwIfNotFound: true);
            m_XRIRightHand_PokePosition = m_XRIRightHand.FindAction("Poke Position", throwIfNotFound: true);
            m_XRIRightHand_PokeRotation = m_XRIRightHand.FindAction("Poke Rotation", throwIfNotFound: true);
            m_XRIRightHand_GripPosition = m_XRIRightHand.FindAction("Grip Position", throwIfNotFound: true);
            m_XRIRightHand_GripRotation = m_XRIRightHand.FindAction("Grip Rotation", throwIfNotFound: true);
            // XRI RightHand Interaction
            m_XRIRightHandInteraction = asset.FindActionMap("XRI RightHand Interaction", throwIfNotFound: true);
            m_XRIRightHandInteraction_Select = m_XRIRightHandInteraction.FindAction("Select", throwIfNotFound: true);
            m_XRIRightHandInteraction_SelectValue = m_XRIRightHandInteraction.FindAction("Select Value", throwIfNotFound: true);
            m_XRIRightHandInteraction_Activate = m_XRIRightHandInteraction.FindAction("Activate", throwIfNotFound: true);
            m_XRIRightHandInteraction_ActivateValue = m_XRIRightHandInteraction.FindAction("Activate Value", throwIfNotFound: true);
            m_XRIRightHandInteraction_UIPress = m_XRIRightHandInteraction.FindAction("UI Press", throwIfNotFound: true);
            m_XRIRightHandInteraction_UIPressValue = m_XRIRightHandInteraction.FindAction("UI Press Value", throwIfNotFound: true);
            m_XRIRightHandInteraction_UIScroll = m_XRIRightHandInteraction.FindAction("UI Scroll", throwIfNotFound: true);
            m_XRIRightHandInteraction_RotateAnchor = m_XRIRightHandInteraction.FindAction("Rotate Anchor", throwIfNotFound: true);
            m_XRIRightHandInteraction_TranslateAnchor = m_XRIRightHandInteraction.FindAction("Translate Anchor", throwIfNotFound: true);
            m_XRIRightHandInteraction_ScaleToggle = m_XRIRightHandInteraction.FindAction("Scale Toggle", throwIfNotFound: true);
            m_XRIRightHandInteraction_ScaleDelta = m_XRIRightHandInteraction.FindAction("Scale Delta", throwIfNotFound: true);
            m_XRIRightHandInteraction_Menu = m_XRIRightHandInteraction.FindAction("Menu", throwIfNotFound: true);
            m_XRIRightHandInteraction_AnimationWheel = m_XRIRightHandInteraction.FindAction("AnimationWheel", throwIfNotFound: true);
            // XRI RightHand Locomotion
            m_XRIRightHandLocomotion = asset.FindActionMap("XRI RightHand Locomotion", throwIfNotFound: true);
            m_XRIRightHandLocomotion_TeleportSelect = m_XRIRightHandLocomotion.FindAction("Teleport Select", throwIfNotFound: true);
            m_XRIRightHandLocomotion_TeleportModeActivate = m_XRIRightHandLocomotion.FindAction("Teleport Mode Activate", throwIfNotFound: true);
            m_XRIRightHandLocomotion_TeleportModeCancel = m_XRIRightHandLocomotion.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
            m_XRIRightHandLocomotion_TeleportDirection = m_XRIRightHandLocomotion.FindAction("Teleport Direction", throwIfNotFound: true);
            m_XRIRightHandLocomotion_Turn = m_XRIRightHandLocomotion.FindAction("Turn", throwIfNotFound: true);
            m_XRIRightHandLocomotion_Move = m_XRIRightHandLocomotion.FindAction("Move", throwIfNotFound: true);
            m_XRIRightHandLocomotion_GrabMove = m_XRIRightHandLocomotion.FindAction("Grab Move", throwIfNotFound: true);
            m_XRIRightHandLocomotion_SnapTurn = m_XRIRightHandLocomotion.FindAction("Snap Turn", throwIfNotFound: true);
            // XRI UI
            m_XRIUI = asset.FindActionMap("XRI UI", throwIfNotFound: true);
            m_XRIUI_Navigate = m_XRIUI.FindAction("Navigate", throwIfNotFound: true);
            m_XRIUI_Submit = m_XRIUI.FindAction("Submit", throwIfNotFound: true);
            m_XRIUI_Cancel = m_XRIUI.FindAction("Cancel", throwIfNotFound: true);
            m_XRIUI_Point = m_XRIUI.FindAction("Point", throwIfNotFound: true);
            m_XRIUI_Click = m_XRIUI.FindAction("Click", throwIfNotFound: true);
            m_XRIUI_ScrollWheel = m_XRIUI.FindAction("ScrollWheel", throwIfNotFound: true);
            m_XRIUI_MiddleClick = m_XRIUI.FindAction("MiddleClick", throwIfNotFound: true);
            m_XRIUI_RightClick = m_XRIUI.FindAction("RightClick", throwIfNotFound: true);
            // Touchscreen Gestures
            m_TouchscreenGestures = asset.FindActionMap("Touchscreen Gestures", throwIfNotFound: true);
            m_TouchscreenGestures_TapStartPosition = m_TouchscreenGestures.FindAction("Tap Start Position", throwIfNotFound: true);
            m_TouchscreenGestures_DragCurrentPosition = m_TouchscreenGestures.FindAction("Drag Current Position", throwIfNotFound: true);
            m_TouchscreenGestures_DragDelta = m_TouchscreenGestures.FindAction("Drag Delta", throwIfNotFound: true);
            m_TouchscreenGestures_PinchStartPosition = m_TouchscreenGestures.FindAction("Pinch Start Position", throwIfNotFound: true);
            m_TouchscreenGestures_PinchGap = m_TouchscreenGestures.FindAction("Pinch Gap", throwIfNotFound: true);
            m_TouchscreenGestures_PinchGapDelta = m_TouchscreenGestures.FindAction("Pinch Gap Delta", throwIfNotFound: true);
            m_TouchscreenGestures_TwistStartPosition = m_TouchscreenGestures.FindAction("Twist Start Position", throwIfNotFound: true);
            m_TouchscreenGestures_TwistDeltaRotation = m_TouchscreenGestures.FindAction("Twist Delta Rotation", throwIfNotFound: true);
            m_TouchscreenGestures_ScreenTouchCount = m_TouchscreenGestures.FindAction("Screen Touch Count", throwIfNotFound: true);
            // XRI Calibrate
            m_XRICalibrate = asset.FindActionMap("XRI Calibrate", throwIfNotFound: true);
            m_XRICalibrate_Calibrate = m_XRICalibrate.FindAction("Calibrate", throwIfNotFound: true);
            // XRI Keyboard
            m_XRIKeyboard = asset.FindActionMap("XRI Keyboard", throwIfNotFound: true);
            m_XRIKeyboard_Move = m_XRIKeyboard.FindAction("Move", throwIfNotFound: true);
            m_XRIKeyboard_Menu = m_XRIKeyboard.FindAction("Menu", throwIfNotFound: true);
            m_XRIKeyboard_Recorder = m_XRIKeyboard.FindAction("Recorder", throwIfNotFound: true);
            m_XRIKeyboard_Interaction = m_XRIKeyboard.FindAction("Interaction", throwIfNotFound: true);
            m_XRIKeyboard_Mute = m_XRIKeyboard.FindAction("Mute", throwIfNotFound: true);
            m_XRIKeyboard_AnimationWheel = m_XRIKeyboard.FindAction("AnimationWheel", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // XRI Head
        private readonly InputActionMap m_XRIHead;
        private List<IXRIHeadActions> m_XRIHeadActionsCallbackInterfaces = new List<IXRIHeadActions>();
        private readonly InputAction m_XRIHead_Position;
        private readonly InputAction m_XRIHead_CameraLook;
        private readonly InputAction m_XRIHead_LockCamera;
        private readonly InputAction m_XRIHead_Rotation;
        private readonly InputAction m_XRIHead_IsTracked;
        private readonly InputAction m_XRIHead_TrackingState;
        private readonly InputAction m_XRIHead_EyeGazePosition;
        private readonly InputAction m_XRIHead_EyeGazeRotation;
        private readonly InputAction m_XRIHead_EyeGazeIsTracked;
        private readonly InputAction m_XRIHead_EyeGazeTrackingState;
        public struct XRIHeadActions
        {
            private @PlayerInputMap m_Wrapper;
            public XRIHeadActions(@PlayerInputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_XRIHead_Position;
            public InputAction @CameraLook => m_Wrapper.m_XRIHead_CameraLook;
            public InputAction @LockCamera => m_Wrapper.m_XRIHead_LockCamera;
            public InputAction @Rotation => m_Wrapper.m_XRIHead_Rotation;
            public InputAction @IsTracked => m_Wrapper.m_XRIHead_IsTracked;
            public InputAction @TrackingState => m_Wrapper.m_XRIHead_TrackingState;
            public InputAction @EyeGazePosition => m_Wrapper.m_XRIHead_EyeGazePosition;
            public InputAction @EyeGazeRotation => m_Wrapper.m_XRIHead_EyeGazeRotation;
            public InputAction @EyeGazeIsTracked => m_Wrapper.m_XRIHead_EyeGazeIsTracked;
            public InputAction @EyeGazeTrackingState => m_Wrapper.m_XRIHead_EyeGazeTrackingState;
            public InputActionMap Get() { return m_Wrapper.m_XRIHead; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(XRIHeadActions set) { return set.Get(); }
            public void AddCallbacks(IXRIHeadActions instance)
            {
                if (instance == null || m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Add(instance);
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @CameraLook.started += instance.OnCameraLook;
                @CameraLook.performed += instance.OnCameraLook;
                @CameraLook.canceled += instance.OnCameraLook;
                @LockCamera.started += instance.OnLockCamera;
                @LockCamera.performed += instance.OnLockCamera;
                @LockCamera.canceled += instance.OnLockCamera;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @IsTracked.started += instance.OnIsTracked;
                @IsTracked.performed += instance.OnIsTracked;
                @IsTracked.canceled += instance.OnIsTracked;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
                @EyeGazePosition.started += instance.OnEyeGazePosition;
                @EyeGazePosition.performed += instance.OnEyeGazePosition;
                @EyeGazePosition.canceled += instance.OnEyeGazePosition;
                @EyeGazeRotation.started += instance.OnEyeGazeRotation;
                @EyeGazeRotation.performed += instance.OnEyeGazeRotation;
                @EyeGazeRotation.canceled += instance.OnEyeGazeRotation;
                @EyeGazeIsTracked.started += instance.OnEyeGazeIsTracked;
                @EyeGazeIsTracked.performed += instance.OnEyeGazeIsTracked;
                @EyeGazeIsTracked.canceled += instance.OnEyeGazeIsTracked;
                @EyeGazeTrackingState.started += instance.OnEyeGazeTrackingState;
                @EyeGazeTrackingState.performed += instance.OnEyeGazeTrackingState;
                @EyeGazeTrackingState.canceled += instance.OnEyeGazeTrackingState;
            }

            private void UnregisterCallbacks(IXRIHeadActions instance)
            {
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
                @CameraLook.started -= instance.OnCameraLook;
                @CameraLook.performed -= instance.OnCameraLook;
                @CameraLook.canceled -= instance.OnCameraLook;
                @LockCamera.started -= instance.OnLockCamera;
                @LockCamera.performed -= instance.OnLockCamera;
                @LockCamera.canceled -= instance.OnLockCamera;
                @Rotation.started -= instance.OnRotation;
                @Rotation.performed -= instance.OnRotation;
                @Rotation.canceled -= instance.OnRotation;
                @IsTracked.started -= instance.OnIsTracked;
                @IsTracked.performed -= instance.OnIsTracked;
                @IsTracked.canceled -= instance.OnIsTracked;
                @TrackingState.started -= instance.OnTrackingState;
                @TrackingState.performed -= instance.OnTrackingState;
                @TrackingState.canceled -= instance.OnTrackingState;
                @EyeGazePosition.started -= instance.OnEyeGazePosition;
                @EyeGazePosition.performed -= instance.OnEyeGazePosition;
                @EyeGazePosition.canceled -= instance.OnEyeGazePosition;
                @EyeGazeRotation.started -= instance.OnEyeGazeRotation;
                @EyeGazeRotation.performed -= instance.OnEyeGazeRotation;
                @EyeGazeRotation.canceled -= instance.OnEyeGazeRotation;
                @EyeGazeIsTracked.started -= instance.OnEyeGazeIsTracked;
                @EyeGazeIsTracked.performed -= instance.OnEyeGazeIsTracked;
                @EyeGazeIsTracked.canceled -= instance.OnEyeGazeIsTracked;
                @EyeGazeTrackingState.started -= instance.OnEyeGazeTrackingState;
                @EyeGazeTrackingState.performed -= instance.OnEyeGazeTrackingState;
                @EyeGazeTrackingState.canceled -= instance.OnEyeGazeTrackingState;
            }

            public void RemoveCallbacks(IXRIHeadActions instance)
            {
                if (m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IXRIHeadActions instance)
            {
                foreach (var item in m_Wrapper.m_XRIHeadActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public XRIHeadActions @XRIHead => new XRIHeadActions(this);

        // XRI LeftHand
        private readonly InputActionMap m_XRILeftHand;
        private List<IXRILeftHandActions> m_XRILeftHandActionsCallbackInterfaces = new List<IXRILeftHandActions>();
        private readonly InputAction m_XRILeftHand_Position;
        private readonly InputAction m_XRILeftHand_Rotation;
        private readonly InputAction m_XRILeftHand_IsTracked;
        private readonly InputAction m_XRILeftHand_TrackingState;
        private readonly InputAction m_XRILeftHand_HapticDevice;
        private readonly InputAction m_XRILeftHand_AimPosition;
        private readonly InputAction m_XRILeftHand_AimRotation;
        private readonly InputAction m_XRILeftHand_AimFlags;
        private readonly InputAction m_XRILeftHand_PinchPosition;
        private readonly InputAction m_XRILeftHand_PokePosition;
        private readonly InputAction m_XRILeftHand_PokeRotation;
        private readonly InputAction m_XRILeftHand_GripPosition;
        private readonly InputAction m_XRILeftHand_GripRotation;
        public struct XRILeftHandActions
        {
            private @PlayerInputMap m_Wrapper;
            public XRILeftHandActions(@PlayerInputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_XRILeftHand_Position;
            public InputAction @Rotation => m_Wrapper.m_XRILeftHand_Rotation;
            public InputAction @IsTracked => m_Wrapper.m_XRILeftHand_IsTracked;
            public InputAction @TrackingState => m_Wrapper.m_XRILeftHand_TrackingState;
            public InputAction @HapticDevice => m_Wrapper.m_XRILeftHand_HapticDevice;
            public InputAction @AimPosition => m_Wrapper.m_XRILeftHand_AimPosition;
            public InputAction @AimRotation => m_Wrapper.m_XRILeftHand_AimRotation;
            public InputAction @AimFlags => m_Wrapper.m_XRILeftHand_AimFlags;
            public InputAction @PinchPosition => m_Wrapper.m_XRILeftHand_PinchPosition;
            public InputAction @PokePosition => m_Wrapper.m_XRILeftHand_PokePosition;
            public InputAction @PokeRotation => m_Wrapper.m_XRILeftHand_PokeRotation;
            public InputAction @GripPosition => m_Wrapper.m_XRILeftHand_GripPosition;
            public InputAction @GripRotation => m_Wrapper.m_XRILeftHand_GripRotation;
            public InputActionMap Get() { return m_Wrapper.m_XRILeftHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(XRILeftHandActions set) { return set.Get(); }
            public void AddCallbacks(IXRILeftHandActions instance)
            {
                if (instance == null || m_Wrapper.m_XRILeftHandActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_XRILeftHandActionsCallbackInterfaces.Add(instance);
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @IsTracked.started += instance.OnIsTracked;
                @IsTracked.performed += instance.OnIsTracked;
                @IsTracked.canceled += instance.OnIsTracked;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
                @HapticDevice.started += instance.OnHapticDevice;
                @HapticDevice.performed += instance.OnHapticDevice;
                @HapticDevice.canceled += instance.OnHapticDevice;
                @AimPosition.started += instance.OnAimPosition;
                @AimPosition.performed += instance.OnAimPosition;
                @AimPosition.canceled += instance.OnAimPosition;
                @AimRotation.started += instance.OnAimRotation;
                @AimRotation.performed += instance.OnAimRotation;
                @AimRotation.canceled += instance.OnAimRotation;
                @AimFlags.started += instance.OnAimFlags;
                @AimFlags.performed += instance.OnAimFlags;
                @AimFlags.canceled += instance.OnAimFlags;
                @PinchPosition.started += instance.OnPinchPosition;
                @PinchPosition.performed += instance.OnPinchPosition;
                @PinchPosition.canceled += instance.OnPinchPosition;
                @PokePosition.started += instance.OnPokePosition;
                @PokePosition.performed += instance.OnPokePosition;
                @PokePosition.canceled += instance.OnPokePosition;
                @PokeRotation.started += instance.OnPokeRotation;
                @PokeRotation.performed += instance.OnPokeRotation;
                @PokeRotation.canceled += instance.OnPokeRotation;
                @GripPosition.started += instance.OnGripPosition;
                @GripPosition.performed += instance.OnGripPosition;
                @GripPosition.canceled += instance.OnGripPosition;
                @GripRotation.started += instance.OnGripRotation;
                @GripRotation.performed += instance.OnGripRotation;
                @GripRotation.canceled += instance.OnGripRotation;
            }

            private void UnregisterCallbacks(IXRILeftHandActions instance)
            {
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
                @Rotation.started -= instance.OnRotation;
                @Rotation.performed -= instance.OnRotation;
                @Rotation.canceled -= instance.OnRotation;
                @IsTracked.started -= instance.OnIsTracked;
                @IsTracked.performed -= instance.OnIsTracked;
                @IsTracked.canceled -= instance.OnIsTracked;
                @TrackingState.started -= instance.OnTrackingState;
                @TrackingState.performed -= instance.OnTrackingState;
                @TrackingState.canceled -= instance.OnTrackingState;
                @HapticDevice.started -= instance.OnHapticDevice;
                @HapticDevice.performed -= instance.OnHapticDevice;
                @HapticDevice.canceled -= instance.OnHapticDevice;
                @AimPosition.started -= instance.OnAimPosition;
                @AimPosition.performed -= instance.OnAimPosition;
                @AimPosition.canceled -= instance.OnAimPosition;
                @AimRotation.started -= instance.OnAimRotation;
                @AimRotation.performed -= instance.OnAimRotation;
                @AimRotation.canceled -= instance.OnAimRotation;
                @AimFlags.started -= instance.OnAimFlags;
                @AimFlags.performed -= instance.OnAimFlags;
                @AimFlags.canceled -= instance.OnAimFlags;
                @PinchPosition.started -= instance.OnPinchPosition;
                @PinchPosition.performed -= instance.OnPinchPosition;
                @PinchPosition.canceled -= instance.OnPinchPosition;
                @PokePosition.started -= instance.OnPokePosition;
                @PokePosition.performed -= instance.OnPokePosition;
                @PokePosition.canceled -= instance.OnPokePosition;
                @PokeRotation.started -= instance.OnPokeRotation;
                @PokeRotation.performed -= instance.OnPokeRotation;
                @PokeRotation.canceled -= instance.OnPokeRotation;
                @GripPosition.started -= instance.OnGripPosition;
                @GripPosition.performed -= instance.OnGripPosition;
                @GripPosition.canceled -= instance.OnGripPosition;
                @GripRotation.started -= instance.OnGripRotation;
                @GripRotation.performed -= instance.OnGripRotation;
                @GripRotation.canceled -= instance.OnGripRotation;
            }

            public void RemoveCallbacks(IXRILeftHandActions instance)
            {
                if (m_Wrapper.m_XRILeftHandActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IXRILeftHandActions instance)
            {
                foreach (var item in m_Wrapper.m_XRILeftHandActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_XRILeftHandActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public XRILeftHandActions @XRILeftHand => new XRILeftHandActions(this);

        // XRI LeftHand Interaction
        private readonly InputActionMap m_XRILeftHandInteraction;
        private List<IXRILeftHandInteractionActions> m_XRILeftHandInteractionActionsCallbackInterfaces = new List<IXRILeftHandInteractionActions>();
        private readonly InputAction m_XRILeftHandInteraction_Select;
        private readonly InputAction m_XRILeftHandInteraction_SelectValue;
        private readonly InputAction m_XRILeftHandInteraction_Activate;
        private readonly InputAction m_XRILeftHandInteraction_ActivateValue;
        private readonly InputAction m_XRILeftHandInteraction_UIPress;
        private readonly InputAction m_XRILeftHandInteraction_UIPressValue;
        private readonly InputAction m_XRILeftHandInteraction_UIScroll;
        private readonly InputAction m_XRILeftHandInteraction_RotateAnchor;
        private readonly InputAction m_XRILeftHandInteraction_TranslateAnchor;
        private readonly InputAction m_XRILeftHandInteraction_ScaleToggle;
        private readonly InputAction m_XRILeftHandInteraction_ScaleDelta;
        private readonly InputAction m_XRILeftHandInteraction_Сalibration;
        public struct XRILeftHandInteractionActions
        {
            private @PlayerInputMap m_Wrapper;
            public XRILeftHandInteractionActions(@PlayerInputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @Select => m_Wrapper.m_XRILeftHandInteraction_Select;
            public InputAction @SelectValue => m_Wrapper.m_XRILeftHandInteraction_SelectValue;
            public InputAction @Activate => m_Wrapper.m_XRILeftHandInteraction_Activate;
            public InputAction @ActivateValue => m_Wrapper.m_XRILeftHandInteraction_ActivateValue;
            public InputAction @UIPress => m_Wrapper.m_XRILeftHandInteraction_UIPress;
            public InputAction @UIPressValue => m_Wrapper.m_XRILeftHandInteraction_UIPressValue;
            public InputAction @UIScroll => m_Wrapper.m_XRILeftHandInteraction_UIScroll;
            public InputAction @RotateAnchor => m_Wrapper.m_XRILeftHandInteraction_RotateAnchor;
            public InputAction @TranslateAnchor => m_Wrapper.m_XRILeftHandInteraction_TranslateAnchor;
            public InputAction @ScaleToggle => m_Wrapper.m_XRILeftHandInteraction_ScaleToggle;
            public InputAction @ScaleDelta => m_Wrapper.m_XRILeftHandInteraction_ScaleDelta;
            public InputAction @Сalibration => m_Wrapper.m_XRILeftHandInteraction_Сalibration;
            public InputActionMap Get() { return m_Wrapper.m_XRILeftHandInteraction; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(XRILeftHandInteractionActions set) { return set.Get(); }
            public void AddCallbacks(IXRILeftHandInteractionActions instance)
            {
                if (instance == null || m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterfaces.Add(instance);
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @SelectValue.started += instance.OnSelectValue;
                @SelectValue.performed += instance.OnSelectValue;
                @SelectValue.canceled += instance.OnSelectValue;
                @Activate.started += instance.OnActivate;
                @Activate.performed += instance.OnActivate;
                @Activate.canceled += instance.OnActivate;
                @ActivateValue.started += instance.OnActivateValue;
                @ActivateValue.performed += instance.OnActivateValue;
                @ActivateValue.canceled += instance.OnActivateValue;
                @UIPress.started += instance.OnUIPress;
                @UIPress.performed += instance.OnUIPress;
                @UIPress.canceled += instance.OnUIPress;
                @UIPressValue.started += instance.OnUIPressValue;
                @UIPressValue.performed += instance.OnUIPressValue;
                @UIPressValue.canceled += instance.OnUIPressValue;
                @UIScroll.started += instance.OnUIScroll;
                @UIScroll.performed += instance.OnUIScroll;
                @UIScroll.canceled += instance.OnUIScroll;
                @RotateAnchor.started += instance.OnRotateAnchor;
                @RotateAnchor.performed += instance.OnRotateAnchor;
                @RotateAnchor.canceled += instance.OnRotateAnchor;
                @TranslateAnchor.started += instance.OnTranslateAnchor;
                @TranslateAnchor.performed += instance.OnTranslateAnchor;
                @TranslateAnchor.canceled += instance.OnTranslateAnchor;
                @ScaleToggle.started += instance.OnScaleToggle;
                @ScaleToggle.performed += instance.OnScaleToggle;
                @ScaleToggle.canceled += instance.OnScaleToggle;
                @ScaleDelta.started += instance.OnScaleDelta;
                @ScaleDelta.performed += instance.OnScaleDelta;
                @ScaleDelta.canceled += instance.OnScaleDelta;
                @Сalibration.started += instance.OnСalibration;
                @Сalibration.performed += instance.OnСalibration;
                @Сalibration.canceled += instance.OnСalibration;
            }

            private void UnregisterCallbacks(IXRILeftHandInteractionActions instance)
            {
                @Select.started -= instance.OnSelect;
                @Select.performed -= instance.OnSelect;
                @Select.canceled -= instance.OnSelect;
                @SelectValue.started -= instance.OnSelectValue;
                @SelectValue.performed -= instance.OnSelectValue;
                @SelectValue.canceled -= instance.OnSelectValue;
                @Activate.started -= instance.OnActivate;
                @Activate.performed -= instance.OnActivate;
                @Activate.canceled -= instance.OnActivate;
                @ActivateValue.started -= instance.OnActivateValue;
                @ActivateValue.performed -= instance.OnActivateValue;
                @ActivateValue.canceled -= instance.OnActivateValue;
                @UIPress.started -= instance.OnUIPress;
                @UIPress.performed -= instance.OnUIPress;
                @UIPress.canceled -= instance.OnUIPress;
                @UIPressValue.started -= instance.OnUIPressValue;
                @UIPressValue.performed -= instance.OnUIPressValue;
                @UIPressValue.canceled -= instance.OnUIPressValue;
                @UIScroll.started -= instance.OnUIScroll;
                @UIScroll.performed -= instance.OnUIScroll;
                @UIScroll.canceled -= instance.OnUIScroll;
                @RotateAnchor.started -= instance.OnRotateAnchor;
                @RotateAnchor.performed -= instance.OnRotateAnchor;
                @RotateAnchor.canceled -= instance.OnRotateAnchor;
                @TranslateAnchor.started -= instance.OnTranslateAnchor;
                @TranslateAnchor.performed -= instance.OnTranslateAnchor;
                @TranslateAnchor.canceled -= instance.OnTranslateAnchor;
                @ScaleToggle.started -= instance.OnScaleToggle;
                @ScaleToggle.performed -= instance.OnScaleToggle;
                @ScaleToggle.canceled -= instance.OnScaleToggle;
                @ScaleDelta.started -= instance.OnScaleDelta;
                @ScaleDelta.performed -= instance.OnScaleDelta;
                @ScaleDelta.canceled -= instance.OnScaleDelta;
                @Сalibration.started -= instance.OnСalibration;
                @Сalibration.performed -= instance.OnСalibration;
                @Сalibration.canceled -= instance.OnСalibration;
            }

            public void RemoveCallbacks(IXRILeftHandInteractionActions instance)
            {
                if (m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IXRILeftHandInteractionActions instance)
            {
                foreach (var item in m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public XRILeftHandInteractionActions @XRILeftHandInteraction => new XRILeftHandInteractionActions(this);

        // XRI LeftHand Locomotion
        private readonly InputActionMap m_XRILeftHandLocomotion;
        private List<IXRILeftHandLocomotionActions> m_XRILeftHandLocomotionActionsCallbackInterfaces = new List<IXRILeftHandLocomotionActions>();
        private readonly InputAction m_XRILeftHandLocomotion_TeleportSelect;
        private readonly InputAction m_XRILeftHandLocomotion_TeleportModeActivate;
        private readonly InputAction m_XRILeftHandLocomotion_TeleportModeCancel;
        private readonly InputAction m_XRILeftHandLocomotion_TeleportDirection;
        private readonly InputAction m_XRILeftHandLocomotion_Turn;
        private readonly InputAction m_XRILeftHandLocomotion_Move;
        private readonly InputAction m_XRILeftHandLocomotion_GrabMove;
        private readonly InputAction m_XRILeftHandLocomotion_SnapTurn;
        public struct XRILeftHandLocomotionActions
        {
            private @PlayerInputMap m_Wrapper;
            public XRILeftHandLocomotionActions(@PlayerInputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @TeleportSelect => m_Wrapper.m_XRILeftHandLocomotion_TeleportSelect;
            public InputAction @TeleportModeActivate => m_Wrapper.m_XRILeftHandLocomotion_TeleportModeActivate;
            public InputAction @TeleportModeCancel => m_Wrapper.m_XRILeftHandLocomotion_TeleportModeCancel;
            public InputAction @TeleportDirection => m_Wrapper.m_XRILeftHandLocomotion_TeleportDirection;
            public InputAction @Turn => m_Wrapper.m_XRILeftHandLocomotion_Turn;
            public InputAction @Move => m_Wrapper.m_XRILeftHandLocomotion_Move;
            public InputAction @GrabMove => m_Wrapper.m_XRILeftHandLocomotion_GrabMove;
            public InputAction @SnapTurn => m_Wrapper.m_XRILeftHandLocomotion_SnapTurn;
            public InputActionMap Get() { return m_Wrapper.m_XRILeftHandLocomotion; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(XRILeftHandLocomotionActions set) { return set.Get(); }
            public void AddCallbacks(IXRILeftHandLocomotionActions instance)
            {
                if (instance == null || m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterfaces.Add(instance);
                @TeleportSelect.started += instance.OnTeleportSelect;
                @TeleportSelect.performed += instance.OnTeleportSelect;
                @TeleportSelect.canceled += instance.OnTeleportSelect;
                @TeleportModeActivate.started += instance.OnTeleportModeActivate;
                @TeleportModeActivate.performed += instance.OnTeleportModeActivate;
                @TeleportModeActivate.canceled += instance.OnTeleportModeActivate;
                @TeleportModeCancel.started += instance.OnTeleportModeCancel;
                @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
                @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
                @TeleportDirection.started += instance.OnTeleportDirection;
                @TeleportDirection.performed += instance.OnTeleportDirection;
                @TeleportDirection.canceled += instance.OnTeleportDirection;
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @GrabMove.started += instance.OnGrabMove;
                @GrabMove.performed += instance.OnGrabMove;
                @GrabMove.canceled += instance.OnGrabMove;
                @SnapTurn.started += instance.OnSnapTurn;
                @SnapTurn.performed += instance.OnSnapTurn;
                @SnapTurn.canceled += instance.OnSnapTurn;
            }

            private void UnregisterCallbacks(IXRILeftHandLocomotionActions instance)
            {
                @TeleportSelect.started -= instance.OnTeleportSelect;
                @TeleportSelect.performed -= instance.OnTeleportSelect;
                @TeleportSelect.canceled -= instance.OnTeleportSelect;
                @TeleportModeActivate.started -= instance.OnTeleportModeActivate;
                @TeleportModeActivate.performed -= instance.OnTeleportModeActivate;
                @TeleportModeActivate.canceled -= instance.OnTeleportModeActivate;
                @TeleportModeCancel.started -= instance.OnTeleportModeCancel;
                @TeleportModeCancel.performed -= instance.OnTeleportModeCancel;
                @TeleportModeCancel.canceled -= instance.OnTeleportModeCancel;
                @TeleportDirection.started -= instance.OnTeleportDirection;
                @TeleportDirection.performed -= instance.OnTeleportDirection;
                @TeleportDirection.canceled -= instance.OnTeleportDirection;
                @Turn.started -= instance.OnTurn;
                @Turn.performed -= instance.OnTurn;
                @Turn.canceled -= instance.OnTurn;
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @GrabMove.started -= instance.OnGrabMove;
                @GrabMove.performed -= instance.OnGrabMove;
                @GrabMove.canceled -= instance.OnGrabMove;
                @SnapTurn.started -= instance.OnSnapTurn;
                @SnapTurn.performed -= instance.OnSnapTurn;
                @SnapTurn.canceled -= instance.OnSnapTurn;
            }

            public void RemoveCallbacks(IXRILeftHandLocomotionActions instance)
            {
                if (m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IXRILeftHandLocomotionActions instance)
            {
                foreach (var item in m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public XRILeftHandLocomotionActions @XRILeftHandLocomotion => new XRILeftHandLocomotionActions(this);

        // XRI RightHand
        private readonly InputActionMap m_XRIRightHand;
        private List<IXRIRightHandActions> m_XRIRightHandActionsCallbackInterfaces = new List<IXRIRightHandActions>();
        private readonly InputAction m_XRIRightHand_Position;
        private readonly InputAction m_XRIRightHand_Rotation;
        private readonly InputAction m_XRIRightHand_IsTracked;
        private readonly InputAction m_XRIRightHand_TrackingState;
        private readonly InputAction m_XRIRightHand_HapticDevice;
        private readonly InputAction m_XRIRightHand_AimPosition;
        private readonly InputAction m_XRIRightHand_AimRotation;
        private readonly InputAction m_XRIRightHand_AimFlags;
        private readonly InputAction m_XRIRightHand_PinchPosition;
        private readonly InputAction m_XRIRightHand_PokePosition;
        private readonly InputAction m_XRIRightHand_PokeRotation;
        private readonly InputAction m_XRIRightHand_GripPosition;
        private readonly InputAction m_XRIRightHand_GripRotation;
        public struct XRIRightHandActions
        {
            private @PlayerInputMap m_Wrapper;
            public XRIRightHandActions(@PlayerInputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_XRIRightHand_Position;
            public InputAction @Rotation => m_Wrapper.m_XRIRightHand_Rotation;
            public InputAction @IsTracked => m_Wrapper.m_XRIRightHand_IsTracked;
            public InputAction @TrackingState => m_Wrapper.m_XRIRightHand_TrackingState;
            public InputAction @HapticDevice => m_Wrapper.m_XRIRightHand_HapticDevice;
            public InputAction @AimPosition => m_Wrapper.m_XRIRightHand_AimPosition;
            public InputAction @AimRotation => m_Wrapper.m_XRIRightHand_AimRotation;
            public InputAction @AimFlags => m_Wrapper.m_XRIRightHand_AimFlags;
            public InputAction @PinchPosition => m_Wrapper.m_XRIRightHand_PinchPosition;
            public InputAction @PokePosition => m_Wrapper.m_XRIRightHand_PokePosition;
            public InputAction @PokeRotation => m_Wrapper.m_XRIRightHand_PokeRotation;
            public InputAction @GripPosition => m_Wrapper.m_XRIRightHand_GripPosition;
            public InputAction @GripRotation => m_Wrapper.m_XRIRightHand_GripRotation;
            public InputActionMap Get() { return m_Wrapper.m_XRIRightHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(XRIRightHandActions set) { return set.Get(); }
            public void AddCallbacks(IXRIRightHandActions instance)
            {
                if (instance == null || m_Wrapper.m_XRIRightHandActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_XRIRightHandActionsCallbackInterfaces.Add(instance);
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @IsTracked.started += instance.OnIsTracked;
                @IsTracked.performed += instance.OnIsTracked;
                @IsTracked.canceled += instance.OnIsTracked;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
                @HapticDevice.started += instance.OnHapticDevice;
                @HapticDevice.performed += instance.OnHapticDevice;
                @HapticDevice.canceled += instance.OnHapticDevice;
                @AimPosition.started += instance.OnAimPosition;
                @AimPosition.performed += instance.OnAimPosition;
                @AimPosition.canceled += instance.OnAimPosition;
                @AimRotation.started += instance.OnAimRotation;
                @AimRotation.performed += instance.OnAimRotation;
                @AimRotation.canceled += instance.OnAimRotation;
                @AimFlags.started += instance.OnAimFlags;
                @AimFlags.performed += instance.OnAimFlags;
                @AimFlags.canceled += instance.OnAimFlags;
                @PinchPosition.started += instance.OnPinchPosition;
                @PinchPosition.performed += instance.OnPinchPosition;
                @PinchPosition.canceled += instance.OnPinchPosition;
                @PokePosition.started += instance.OnPokePosition;
                @PokePosition.performed += instance.OnPokePosition;
                @PokePosition.canceled += instance.OnPokePosition;
                @PokeRotation.started += instance.OnPokeRotation;
                @PokeRotation.performed += instance.OnPokeRotation;
                @PokeRotation.canceled += instance.OnPokeRotation;
                @GripPosition.started += instance.OnGripPosition;
                @GripPosition.performed += instance.OnGripPosition;
                @GripPosition.canceled += instance.OnGripPosition;
                @GripRotation.started += instance.OnGripRotation;
                @GripRotation.performed += instance.OnGripRotation;
                @GripRotation.canceled += instance.OnGripRotation;
            }

            private void UnregisterCallbacks(IXRIRightHandActions instance)
            {
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
                @Rotation.started -= instance.OnRotation;
                @Rotation.performed -= instance.OnRotation;
                @Rotation.canceled -= instance.OnRotation;
                @IsTracked.started -= instance.OnIsTracked;
                @IsTracked.performed -= instance.OnIsTracked;
                @IsTracked.canceled -= instance.OnIsTracked;
                @TrackingState.started -= instance.OnTrackingState;
                @TrackingState.performed -= instance.OnTrackingState;
                @TrackingState.canceled -= instance.OnTrackingState;
                @HapticDevice.started -= instance.OnHapticDevice;
                @HapticDevice.performed -= instance.OnHapticDevice;
                @HapticDevice.canceled -= instance.OnHapticDevice;
                @AimPosition.started -= instance.OnAimPosition;
                @AimPosition.performed -= instance.OnAimPosition;
                @AimPosition.canceled -= instance.OnAimPosition;
                @AimRotation.started -= instance.OnAimRotation;
                @AimRotation.performed -= instance.OnAimRotation;
                @AimRotation.canceled -= instance.OnAimRotation;
                @AimFlags.started -= instance.OnAimFlags;
                @AimFlags.performed -= instance.OnAimFlags;
                @AimFlags.canceled -= instance.OnAimFlags;
                @PinchPosition.started -= instance.OnPinchPosition;
                @PinchPosition.performed -= instance.OnPinchPosition;
                @PinchPosition.canceled -= instance.OnPinchPosition;
                @PokePosition.started -= instance.OnPokePosition;
                @PokePosition.performed -= instance.OnPokePosition;
                @PokePosition.canceled -= instance.OnPokePosition;
                @PokeRotation.started -= instance.OnPokeRotation;
                @PokeRotation.performed -= instance.OnPokeRotation;
                @PokeRotation.canceled -= instance.OnPokeRotation;
                @GripPosition.started -= instance.OnGripPosition;
                @GripPosition.performed -= instance.OnGripPosition;
                @GripPosition.canceled -= instance.OnGripPosition;
                @GripRotation.started -= instance.OnGripRotation;
                @GripRotation.performed -= instance.OnGripRotation;
                @GripRotation.canceled -= instance.OnGripRotation;
            }

            public void RemoveCallbacks(IXRIRightHandActions instance)
            {
                if (m_Wrapper.m_XRIRightHandActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IXRIRightHandActions instance)
            {
                foreach (var item in m_Wrapper.m_XRIRightHandActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_XRIRightHandActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public XRIRightHandActions @XRIRightHand => new XRIRightHandActions(this);

        // XRI RightHand Interaction
        private readonly InputActionMap m_XRIRightHandInteraction;
        private List<IXRIRightHandInteractionActions> m_XRIRightHandInteractionActionsCallbackInterfaces = new List<IXRIRightHandInteractionActions>();
        private readonly InputAction m_XRIRightHandInteraction_Select;
        private readonly InputAction m_XRIRightHandInteraction_SelectValue;
        private readonly InputAction m_XRIRightHandInteraction_Activate;
        private readonly InputAction m_XRIRightHandInteraction_ActivateValue;
        private readonly InputAction m_XRIRightHandInteraction_UIPress;
        private readonly InputAction m_XRIRightHandInteraction_UIPressValue;
        private readonly InputAction m_XRIRightHandInteraction_UIScroll;
        private readonly InputAction m_XRIRightHandInteraction_RotateAnchor;
        private readonly InputAction m_XRIRightHandInteraction_TranslateAnchor;
        private readonly InputAction m_XRIRightHandInteraction_ScaleToggle;
        private readonly InputAction m_XRIRightHandInteraction_ScaleDelta;
        private readonly InputAction m_XRIRightHandInteraction_Menu;
        private readonly InputAction m_XRIRightHandInteraction_AnimationWheel;
        public struct XRIRightHandInteractionActions
        {
            private @PlayerInputMap m_Wrapper;
            public XRIRightHandInteractionActions(@PlayerInputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @Select => m_Wrapper.m_XRIRightHandInteraction_Select;
            public InputAction @SelectValue => m_Wrapper.m_XRIRightHandInteraction_SelectValue;
            public InputAction @Activate => m_Wrapper.m_XRIRightHandInteraction_Activate;
            public InputAction @ActivateValue => m_Wrapper.m_XRIRightHandInteraction_ActivateValue;
            public InputAction @UIPress => m_Wrapper.m_XRIRightHandInteraction_UIPress;
            public InputAction @UIPressValue => m_Wrapper.m_XRIRightHandInteraction_UIPressValue;
            public InputAction @UIScroll => m_Wrapper.m_XRIRightHandInteraction_UIScroll;
            public InputAction @RotateAnchor => m_Wrapper.m_XRIRightHandInteraction_RotateAnchor;
            public InputAction @TranslateAnchor => m_Wrapper.m_XRIRightHandInteraction_TranslateAnchor;
            public InputAction @ScaleToggle => m_Wrapper.m_XRIRightHandInteraction_ScaleToggle;
            public InputAction @ScaleDelta => m_Wrapper.m_XRIRightHandInteraction_ScaleDelta;
            public InputAction @Menu => m_Wrapper.m_XRIRightHandInteraction_Menu;
            public InputAction @AnimationWheel => m_Wrapper.m_XRIRightHandInteraction_AnimationWheel;
            public InputActionMap Get() { return m_Wrapper.m_XRIRightHandInteraction; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(XRIRightHandInteractionActions set) { return set.Get(); }
            public void AddCallbacks(IXRIRightHandInteractionActions instance)
            {
                if (instance == null || m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterfaces.Add(instance);
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @SelectValue.started += instance.OnSelectValue;
                @SelectValue.performed += instance.OnSelectValue;
                @SelectValue.canceled += instance.OnSelectValue;
                @Activate.started += instance.OnActivate;
                @Activate.performed += instance.OnActivate;
                @Activate.canceled += instance.OnActivate;
                @ActivateValue.started += instance.OnActivateValue;
                @ActivateValue.performed += instance.OnActivateValue;
                @ActivateValue.canceled += instance.OnActivateValue;
                @UIPress.started += instance.OnUIPress;
                @UIPress.performed += instance.OnUIPress;
                @UIPress.canceled += instance.OnUIPress;
                @UIPressValue.started += instance.OnUIPressValue;
                @UIPressValue.performed += instance.OnUIPressValue;
                @UIPressValue.canceled += instance.OnUIPressValue;
                @UIScroll.started += instance.OnUIScroll;
                @UIScroll.performed += instance.OnUIScroll;
                @UIScroll.canceled += instance.OnUIScroll;
                @RotateAnchor.started += instance.OnRotateAnchor;
                @RotateAnchor.performed += instance.OnRotateAnchor;
                @RotateAnchor.canceled += instance.OnRotateAnchor;
                @TranslateAnchor.started += instance.OnTranslateAnchor;
                @TranslateAnchor.performed += instance.OnTranslateAnchor;
                @TranslateAnchor.canceled += instance.OnTranslateAnchor;
                @ScaleToggle.started += instance.OnScaleToggle;
                @ScaleToggle.performed += instance.OnScaleToggle;
                @ScaleToggle.canceled += instance.OnScaleToggle;
                @ScaleDelta.started += instance.OnScaleDelta;
                @ScaleDelta.performed += instance.OnScaleDelta;
                @ScaleDelta.canceled += instance.OnScaleDelta;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
                @AnimationWheel.started += instance.OnAnimationWheel;
                @AnimationWheel.performed += instance.OnAnimationWheel;
                @AnimationWheel.canceled += instance.OnAnimationWheel;
            }

            private void UnregisterCallbacks(IXRIRightHandInteractionActions instance)
            {
                @Select.started -= instance.OnSelect;
                @Select.performed -= instance.OnSelect;
                @Select.canceled -= instance.OnSelect;
                @SelectValue.started -= instance.OnSelectValue;
                @SelectValue.performed -= instance.OnSelectValue;
                @SelectValue.canceled -= instance.OnSelectValue;
                @Activate.started -= instance.OnActivate;
                @Activate.performed -= instance.OnActivate;
                @Activate.canceled -= instance.OnActivate;
                @ActivateValue.started -= instance.OnActivateValue;
                @ActivateValue.performed -= instance.OnActivateValue;
                @ActivateValue.canceled -= instance.OnActivateValue;
                @UIPress.started -= instance.OnUIPress;
                @UIPress.performed -= instance.OnUIPress;
                @UIPress.canceled -= instance.OnUIPress;
                @UIPressValue.started -= instance.OnUIPressValue;
                @UIPressValue.performed -= instance.OnUIPressValue;
                @UIPressValue.canceled -= instance.OnUIPressValue;
                @UIScroll.started -= instance.OnUIScroll;
                @UIScroll.performed -= instance.OnUIScroll;
                @UIScroll.canceled -= instance.OnUIScroll;
                @RotateAnchor.started -= instance.OnRotateAnchor;
                @RotateAnchor.performed -= instance.OnRotateAnchor;
                @RotateAnchor.canceled -= instance.OnRotateAnchor;
                @TranslateAnchor.started -= instance.OnTranslateAnchor;
                @TranslateAnchor.performed -= instance.OnTranslateAnchor;
                @TranslateAnchor.canceled -= instance.OnTranslateAnchor;
                @ScaleToggle.started -= instance.OnScaleToggle;
                @ScaleToggle.performed -= instance.OnScaleToggle;
                @ScaleToggle.canceled -= instance.OnScaleToggle;
                @ScaleDelta.started -= instance.OnScaleDelta;
                @ScaleDelta.performed -= instance.OnScaleDelta;
                @ScaleDelta.canceled -= instance.OnScaleDelta;
                @Menu.started -= instance.OnMenu;
                @Menu.performed -= instance.OnMenu;
                @Menu.canceled -= instance.OnMenu;
                @AnimationWheel.started -= instance.OnAnimationWheel;
                @AnimationWheel.performed -= instance.OnAnimationWheel;
                @AnimationWheel.canceled -= instance.OnAnimationWheel;
            }

            public void RemoveCallbacks(IXRIRightHandInteractionActions instance)
            {
                if (m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IXRIRightHandInteractionActions instance)
            {
                foreach (var item in m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public XRIRightHandInteractionActions @XRIRightHandInteraction => new XRIRightHandInteractionActions(this);

        // XRI RightHand Locomotion
        private readonly InputActionMap m_XRIRightHandLocomotion;
        private List<IXRIRightHandLocomotionActions> m_XRIRightHandLocomotionActionsCallbackInterfaces = new List<IXRIRightHandLocomotionActions>();
        private readonly InputAction m_XRIRightHandLocomotion_TeleportSelect;
        private readonly InputAction m_XRIRightHandLocomotion_TeleportModeActivate;
        private readonly InputAction m_XRIRightHandLocomotion_TeleportModeCancel;
        private readonly InputAction m_XRIRightHandLocomotion_TeleportDirection;
        private readonly InputAction m_XRIRightHandLocomotion_Turn;
        private readonly InputAction m_XRIRightHandLocomotion_Move;
        private readonly InputAction m_XRIRightHandLocomotion_GrabMove;
        private readonly InputAction m_XRIRightHandLocomotion_SnapTurn;
        public struct XRIRightHandLocomotionActions
        {
            private @PlayerInputMap m_Wrapper;
            public XRIRightHandLocomotionActions(@PlayerInputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @TeleportSelect => m_Wrapper.m_XRIRightHandLocomotion_TeleportSelect;
            public InputAction @TeleportModeActivate => m_Wrapper.m_XRIRightHandLocomotion_TeleportModeActivate;
            public InputAction @TeleportModeCancel => m_Wrapper.m_XRIRightHandLocomotion_TeleportModeCancel;
            public InputAction @TeleportDirection => m_Wrapper.m_XRIRightHandLocomotion_TeleportDirection;
            public InputAction @Turn => m_Wrapper.m_XRIRightHandLocomotion_Turn;
            public InputAction @Move => m_Wrapper.m_XRIRightHandLocomotion_Move;
            public InputAction @GrabMove => m_Wrapper.m_XRIRightHandLocomotion_GrabMove;
            public InputAction @SnapTurn => m_Wrapper.m_XRIRightHandLocomotion_SnapTurn;
            public InputActionMap Get() { return m_Wrapper.m_XRIRightHandLocomotion; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(XRIRightHandLocomotionActions set) { return set.Get(); }
            public void AddCallbacks(IXRIRightHandLocomotionActions instance)
            {
                if (instance == null || m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterfaces.Add(instance);
                @TeleportSelect.started += instance.OnTeleportSelect;
                @TeleportSelect.performed += instance.OnTeleportSelect;
                @TeleportSelect.canceled += instance.OnTeleportSelect;
                @TeleportModeActivate.started += instance.OnTeleportModeActivate;
                @TeleportModeActivate.performed += instance.OnTeleportModeActivate;
                @TeleportModeActivate.canceled += instance.OnTeleportModeActivate;
                @TeleportModeCancel.started += instance.OnTeleportModeCancel;
                @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
                @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
                @TeleportDirection.started += instance.OnTeleportDirection;
                @TeleportDirection.performed += instance.OnTeleportDirection;
                @TeleportDirection.canceled += instance.OnTeleportDirection;
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @GrabMove.started += instance.OnGrabMove;
                @GrabMove.performed += instance.OnGrabMove;
                @GrabMove.canceled += instance.OnGrabMove;
                @SnapTurn.started += instance.OnSnapTurn;
                @SnapTurn.performed += instance.OnSnapTurn;
                @SnapTurn.canceled += instance.OnSnapTurn;
            }

            private void UnregisterCallbacks(IXRIRightHandLocomotionActions instance)
            {
                @TeleportSelect.started -= instance.OnTeleportSelect;
                @TeleportSelect.performed -= instance.OnTeleportSelect;
                @TeleportSelect.canceled -= instance.OnTeleportSelect;
                @TeleportModeActivate.started -= instance.OnTeleportModeActivate;
                @TeleportModeActivate.performed -= instance.OnTeleportModeActivate;
                @TeleportModeActivate.canceled -= instance.OnTeleportModeActivate;
                @TeleportModeCancel.started -= instance.OnTeleportModeCancel;
                @TeleportModeCancel.performed -= instance.OnTeleportModeCancel;
                @TeleportModeCancel.canceled -= instance.OnTeleportModeCancel;
                @TeleportDirection.started -= instance.OnTeleportDirection;
                @TeleportDirection.performed -= instance.OnTeleportDirection;
                @TeleportDirection.canceled -= instance.OnTeleportDirection;
                @Turn.started -= instance.OnTurn;
                @Turn.performed -= instance.OnTurn;
                @Turn.canceled -= instance.OnTurn;
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @GrabMove.started -= instance.OnGrabMove;
                @GrabMove.performed -= instance.OnGrabMove;
                @GrabMove.canceled -= instance.OnGrabMove;
                @SnapTurn.started -= instance.OnSnapTurn;
                @SnapTurn.performed -= instance.OnSnapTurn;
                @SnapTurn.canceled -= instance.OnSnapTurn;
            }

            public void RemoveCallbacks(IXRIRightHandLocomotionActions instance)
            {
                if (m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IXRIRightHandLocomotionActions instance)
            {
                foreach (var item in m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public XRIRightHandLocomotionActions @XRIRightHandLocomotion => new XRIRightHandLocomotionActions(this);

        // XRI UI
        private readonly InputActionMap m_XRIUI;
        private List<IXRIUIActions> m_XRIUIActionsCallbackInterfaces = new List<IXRIUIActions>();
        private readonly InputAction m_XRIUI_Navigate;
        private readonly InputAction m_XRIUI_Submit;
        private readonly InputAction m_XRIUI_Cancel;
        private readonly InputAction m_XRIUI_Point;
        private readonly InputAction m_XRIUI_Click;
        private readonly InputAction m_XRIUI_ScrollWheel;
        private readonly InputAction m_XRIUI_MiddleClick;
        private readonly InputAction m_XRIUI_RightClick;
        public struct XRIUIActions
        {
            private @PlayerInputMap m_Wrapper;
            public XRIUIActions(@PlayerInputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @Navigate => m_Wrapper.m_XRIUI_Navigate;
            public InputAction @Submit => m_Wrapper.m_XRIUI_Submit;
            public InputAction @Cancel => m_Wrapper.m_XRIUI_Cancel;
            public InputAction @Point => m_Wrapper.m_XRIUI_Point;
            public InputAction @Click => m_Wrapper.m_XRIUI_Click;
            public InputAction @ScrollWheel => m_Wrapper.m_XRIUI_ScrollWheel;
            public InputAction @MiddleClick => m_Wrapper.m_XRIUI_MiddleClick;
            public InputAction @RightClick => m_Wrapper.m_XRIUI_RightClick;
            public InputActionMap Get() { return m_Wrapper.m_XRIUI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(XRIUIActions set) { return set.Get(); }
            public void AddCallbacks(IXRIUIActions instance)
            {
                if (instance == null || m_Wrapper.m_XRIUIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_XRIUIActionsCallbackInterfaces.Add(instance);
                @Navigate.started += instance.OnNavigate;
                @Navigate.performed += instance.OnNavigate;
                @Navigate.canceled += instance.OnNavigate;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @ScrollWheel.started += instance.OnScrollWheel;
                @ScrollWheel.performed += instance.OnScrollWheel;
                @ScrollWheel.canceled += instance.OnScrollWheel;
                @MiddleClick.started += instance.OnMiddleClick;
                @MiddleClick.performed += instance.OnMiddleClick;
                @MiddleClick.canceled += instance.OnMiddleClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
            }

            private void UnregisterCallbacks(IXRIUIActions instance)
            {
                @Navigate.started -= instance.OnNavigate;
                @Navigate.performed -= instance.OnNavigate;
                @Navigate.canceled -= instance.OnNavigate;
                @Submit.started -= instance.OnSubmit;
                @Submit.performed -= instance.OnSubmit;
                @Submit.canceled -= instance.OnSubmit;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
                @Point.started -= instance.OnPoint;
                @Point.performed -= instance.OnPoint;
                @Point.canceled -= instance.OnPoint;
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @ScrollWheel.started -= instance.OnScrollWheel;
                @ScrollWheel.performed -= instance.OnScrollWheel;
                @ScrollWheel.canceled -= instance.OnScrollWheel;
                @MiddleClick.started -= instance.OnMiddleClick;
                @MiddleClick.performed -= instance.OnMiddleClick;
                @MiddleClick.canceled -= instance.OnMiddleClick;
                @RightClick.started -= instance.OnRightClick;
                @RightClick.performed -= instance.OnRightClick;
                @RightClick.canceled -= instance.OnRightClick;
            }

            public void RemoveCallbacks(IXRIUIActions instance)
            {
                if (m_Wrapper.m_XRIUIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IXRIUIActions instance)
            {
                foreach (var item in m_Wrapper.m_XRIUIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_XRIUIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public XRIUIActions @XRIUI => new XRIUIActions(this);

        // Touchscreen Gestures
        private readonly InputActionMap m_TouchscreenGestures;
        private List<ITouchscreenGesturesActions> m_TouchscreenGesturesActionsCallbackInterfaces = new List<ITouchscreenGesturesActions>();
        private readonly InputAction m_TouchscreenGestures_TapStartPosition;
        private readonly InputAction m_TouchscreenGestures_DragCurrentPosition;
        private readonly InputAction m_TouchscreenGestures_DragDelta;
        private readonly InputAction m_TouchscreenGestures_PinchStartPosition;
        private readonly InputAction m_TouchscreenGestures_PinchGap;
        private readonly InputAction m_TouchscreenGestures_PinchGapDelta;
        private readonly InputAction m_TouchscreenGestures_TwistStartPosition;
        private readonly InputAction m_TouchscreenGestures_TwistDeltaRotation;
        private readonly InputAction m_TouchscreenGestures_ScreenTouchCount;
        public struct TouchscreenGesturesActions
        {
            private @PlayerInputMap m_Wrapper;
            public TouchscreenGesturesActions(@PlayerInputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @TapStartPosition => m_Wrapper.m_TouchscreenGestures_TapStartPosition;
            public InputAction @DragCurrentPosition => m_Wrapper.m_TouchscreenGestures_DragCurrentPosition;
            public InputAction @DragDelta => m_Wrapper.m_TouchscreenGestures_DragDelta;
            public InputAction @PinchStartPosition => m_Wrapper.m_TouchscreenGestures_PinchStartPosition;
            public InputAction @PinchGap => m_Wrapper.m_TouchscreenGestures_PinchGap;
            public InputAction @PinchGapDelta => m_Wrapper.m_TouchscreenGestures_PinchGapDelta;
            public InputAction @TwistStartPosition => m_Wrapper.m_TouchscreenGestures_TwistStartPosition;
            public InputAction @TwistDeltaRotation => m_Wrapper.m_TouchscreenGestures_TwistDeltaRotation;
            public InputAction @ScreenTouchCount => m_Wrapper.m_TouchscreenGestures_ScreenTouchCount;
            public InputActionMap Get() { return m_Wrapper.m_TouchscreenGestures; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TouchscreenGesturesActions set) { return set.Get(); }
            public void AddCallbacks(ITouchscreenGesturesActions instance)
            {
                if (instance == null || m_Wrapper.m_TouchscreenGesturesActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TouchscreenGesturesActionsCallbackInterfaces.Add(instance);
                @TapStartPosition.started += instance.OnTapStartPosition;
                @TapStartPosition.performed += instance.OnTapStartPosition;
                @TapStartPosition.canceled += instance.OnTapStartPosition;
                @DragCurrentPosition.started += instance.OnDragCurrentPosition;
                @DragCurrentPosition.performed += instance.OnDragCurrentPosition;
                @DragCurrentPosition.canceled += instance.OnDragCurrentPosition;
                @DragDelta.started += instance.OnDragDelta;
                @DragDelta.performed += instance.OnDragDelta;
                @DragDelta.canceled += instance.OnDragDelta;
                @PinchStartPosition.started += instance.OnPinchStartPosition;
                @PinchStartPosition.performed += instance.OnPinchStartPosition;
                @PinchStartPosition.canceled += instance.OnPinchStartPosition;
                @PinchGap.started += instance.OnPinchGap;
                @PinchGap.performed += instance.OnPinchGap;
                @PinchGap.canceled += instance.OnPinchGap;
                @PinchGapDelta.started += instance.OnPinchGapDelta;
                @PinchGapDelta.performed += instance.OnPinchGapDelta;
                @PinchGapDelta.canceled += instance.OnPinchGapDelta;
                @TwistStartPosition.started += instance.OnTwistStartPosition;
                @TwistStartPosition.performed += instance.OnTwistStartPosition;
                @TwistStartPosition.canceled += instance.OnTwistStartPosition;
                @TwistDeltaRotation.started += instance.OnTwistDeltaRotation;
                @TwistDeltaRotation.performed += instance.OnTwistDeltaRotation;
                @TwistDeltaRotation.canceled += instance.OnTwistDeltaRotation;
                @ScreenTouchCount.started += instance.OnScreenTouchCount;
                @ScreenTouchCount.performed += instance.OnScreenTouchCount;
                @ScreenTouchCount.canceled += instance.OnScreenTouchCount;
            }

            private void UnregisterCallbacks(ITouchscreenGesturesActions instance)
            {
                @TapStartPosition.started -= instance.OnTapStartPosition;
                @TapStartPosition.performed -= instance.OnTapStartPosition;
                @TapStartPosition.canceled -= instance.OnTapStartPosition;
                @DragCurrentPosition.started -= instance.OnDragCurrentPosition;
                @DragCurrentPosition.performed -= instance.OnDragCurrentPosition;
                @DragCurrentPosition.canceled -= instance.OnDragCurrentPosition;
                @DragDelta.started -= instance.OnDragDelta;
                @DragDelta.performed -= instance.OnDragDelta;
                @DragDelta.canceled -= instance.OnDragDelta;
                @PinchStartPosition.started -= instance.OnPinchStartPosition;
                @PinchStartPosition.performed -= instance.OnPinchStartPosition;
                @PinchStartPosition.canceled -= instance.OnPinchStartPosition;
                @PinchGap.started -= instance.OnPinchGap;
                @PinchGap.performed -= instance.OnPinchGap;
                @PinchGap.canceled -= instance.OnPinchGap;
                @PinchGapDelta.started -= instance.OnPinchGapDelta;
                @PinchGapDelta.performed -= instance.OnPinchGapDelta;
                @PinchGapDelta.canceled -= instance.OnPinchGapDelta;
                @TwistStartPosition.started -= instance.OnTwistStartPosition;
                @TwistStartPosition.performed -= instance.OnTwistStartPosition;
                @TwistStartPosition.canceled -= instance.OnTwistStartPosition;
                @TwistDeltaRotation.started -= instance.OnTwistDeltaRotation;
                @TwistDeltaRotation.performed -= instance.OnTwistDeltaRotation;
                @TwistDeltaRotation.canceled -= instance.OnTwistDeltaRotation;
                @ScreenTouchCount.started -= instance.OnScreenTouchCount;
                @ScreenTouchCount.performed -= instance.OnScreenTouchCount;
                @ScreenTouchCount.canceled -= instance.OnScreenTouchCount;
            }

            public void RemoveCallbacks(ITouchscreenGesturesActions instance)
            {
                if (m_Wrapper.m_TouchscreenGesturesActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITouchscreenGesturesActions instance)
            {
                foreach (var item in m_Wrapper.m_TouchscreenGesturesActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TouchscreenGesturesActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TouchscreenGesturesActions @TouchscreenGestures => new TouchscreenGesturesActions(this);

        // XRI Calibrate
        private readonly InputActionMap m_XRICalibrate;
        private List<IXRICalibrateActions> m_XRICalibrateActionsCallbackInterfaces = new List<IXRICalibrateActions>();
        private readonly InputAction m_XRICalibrate_Calibrate;
        public struct XRICalibrateActions
        {
            private @PlayerInputMap m_Wrapper;
            public XRICalibrateActions(@PlayerInputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @Calibrate => m_Wrapper.m_XRICalibrate_Calibrate;
            public InputActionMap Get() { return m_Wrapper.m_XRICalibrate; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(XRICalibrateActions set) { return set.Get(); }
            public void AddCallbacks(IXRICalibrateActions instance)
            {
                if (instance == null || m_Wrapper.m_XRICalibrateActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_XRICalibrateActionsCallbackInterfaces.Add(instance);
                @Calibrate.started += instance.OnCalibrate;
                @Calibrate.performed += instance.OnCalibrate;
                @Calibrate.canceled += instance.OnCalibrate;
            }

            private void UnregisterCallbacks(IXRICalibrateActions instance)
            {
                @Calibrate.started -= instance.OnCalibrate;
                @Calibrate.performed -= instance.OnCalibrate;
                @Calibrate.canceled -= instance.OnCalibrate;
            }

            public void RemoveCallbacks(IXRICalibrateActions instance)
            {
                if (m_Wrapper.m_XRICalibrateActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IXRICalibrateActions instance)
            {
                foreach (var item in m_Wrapper.m_XRICalibrateActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_XRICalibrateActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public XRICalibrateActions @XRICalibrate => new XRICalibrateActions(this);

        // XRI Keyboard
        private readonly InputActionMap m_XRIKeyboard;
        private List<IXRIKeyboardActions> m_XRIKeyboardActionsCallbackInterfaces = new List<IXRIKeyboardActions>();
        private readonly InputAction m_XRIKeyboard_Move;
        private readonly InputAction m_XRIKeyboard_Menu;
        private readonly InputAction m_XRIKeyboard_Recorder;
        private readonly InputAction m_XRIKeyboard_Interaction;
        private readonly InputAction m_XRIKeyboard_Mute;
        private readonly InputAction m_XRIKeyboard_AnimationWheel;
        public struct XRIKeyboardActions
        {
            private @PlayerInputMap m_Wrapper;
            public XRIKeyboardActions(@PlayerInputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_XRIKeyboard_Move;
            public InputAction @Menu => m_Wrapper.m_XRIKeyboard_Menu;
            public InputAction @Recorder => m_Wrapper.m_XRIKeyboard_Recorder;
            public InputAction @Interaction => m_Wrapper.m_XRIKeyboard_Interaction;
            public InputAction @Mute => m_Wrapper.m_XRIKeyboard_Mute;
            public InputAction @AnimationWheel => m_Wrapper.m_XRIKeyboard_AnimationWheel;
            public InputActionMap Get() { return m_Wrapper.m_XRIKeyboard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(XRIKeyboardActions set) { return set.Get(); }
            public void AddCallbacks(IXRIKeyboardActions instance)
            {
                if (instance == null || m_Wrapper.m_XRIKeyboardActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_XRIKeyboardActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
                @Recorder.started += instance.OnRecorder;
                @Recorder.performed += instance.OnRecorder;
                @Recorder.canceled += instance.OnRecorder;
                @Interaction.started += instance.OnInteraction;
                @Interaction.performed += instance.OnInteraction;
                @Interaction.canceled += instance.OnInteraction;
                @Mute.started += instance.OnMute;
                @Mute.performed += instance.OnMute;
                @Mute.canceled += instance.OnMute;
                @AnimationWheel.started += instance.OnAnimationWheel;
                @AnimationWheel.performed += instance.OnAnimationWheel;
                @AnimationWheel.canceled += instance.OnAnimationWheel;
            }

            private void UnregisterCallbacks(IXRIKeyboardActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Menu.started -= instance.OnMenu;
                @Menu.performed -= instance.OnMenu;
                @Menu.canceled -= instance.OnMenu;
                @Recorder.started -= instance.OnRecorder;
                @Recorder.performed -= instance.OnRecorder;
                @Recorder.canceled -= instance.OnRecorder;
                @Interaction.started -= instance.OnInteraction;
                @Interaction.performed -= instance.OnInteraction;
                @Interaction.canceled -= instance.OnInteraction;
                @Mute.started -= instance.OnMute;
                @Mute.performed -= instance.OnMute;
                @Mute.canceled -= instance.OnMute;
                @AnimationWheel.started -= instance.OnAnimationWheel;
                @AnimationWheel.performed -= instance.OnAnimationWheel;
                @AnimationWheel.canceled -= instance.OnAnimationWheel;
            }

            public void RemoveCallbacks(IXRIKeyboardActions instance)
            {
                if (m_Wrapper.m_XRIKeyboardActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IXRIKeyboardActions instance)
            {
                foreach (var item in m_Wrapper.m_XRIKeyboardActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_XRIKeyboardActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public XRIKeyboardActions @XRIKeyboard => new XRIKeyboardActions(this);
        public interface IXRIHeadActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnCameraLook(InputAction.CallbackContext context);
            void OnLockCamera(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnIsTracked(InputAction.CallbackContext context);
            void OnTrackingState(InputAction.CallbackContext context);
            void OnEyeGazePosition(InputAction.CallbackContext context);
            void OnEyeGazeRotation(InputAction.CallbackContext context);
            void OnEyeGazeIsTracked(InputAction.CallbackContext context);
            void OnEyeGazeTrackingState(InputAction.CallbackContext context);
        }
        public interface IXRILeftHandActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnIsTracked(InputAction.CallbackContext context);
            void OnTrackingState(InputAction.CallbackContext context);
            void OnHapticDevice(InputAction.CallbackContext context);
            void OnAimPosition(InputAction.CallbackContext context);
            void OnAimRotation(InputAction.CallbackContext context);
            void OnAimFlags(InputAction.CallbackContext context);
            void OnPinchPosition(InputAction.CallbackContext context);
            void OnPokePosition(InputAction.CallbackContext context);
            void OnPokeRotation(InputAction.CallbackContext context);
            void OnGripPosition(InputAction.CallbackContext context);
            void OnGripRotation(InputAction.CallbackContext context);
        }
        public interface IXRILeftHandInteractionActions
        {
            void OnSelect(InputAction.CallbackContext context);
            void OnSelectValue(InputAction.CallbackContext context);
            void OnActivate(InputAction.CallbackContext context);
            void OnActivateValue(InputAction.CallbackContext context);
            void OnUIPress(InputAction.CallbackContext context);
            void OnUIPressValue(InputAction.CallbackContext context);
            void OnUIScroll(InputAction.CallbackContext context);
            void OnRotateAnchor(InputAction.CallbackContext context);
            void OnTranslateAnchor(InputAction.CallbackContext context);
            void OnScaleToggle(InputAction.CallbackContext context);
            void OnScaleDelta(InputAction.CallbackContext context);
            void OnСalibration(InputAction.CallbackContext context);
        }
        public interface IXRILeftHandLocomotionActions
        {
            void OnTeleportSelect(InputAction.CallbackContext context);
            void OnTeleportModeActivate(InputAction.CallbackContext context);
            void OnTeleportModeCancel(InputAction.CallbackContext context);
            void OnTeleportDirection(InputAction.CallbackContext context);
            void OnTurn(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnGrabMove(InputAction.CallbackContext context);
            void OnSnapTurn(InputAction.CallbackContext context);
        }
        public interface IXRIRightHandActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnIsTracked(InputAction.CallbackContext context);
            void OnTrackingState(InputAction.CallbackContext context);
            void OnHapticDevice(InputAction.CallbackContext context);
            void OnAimPosition(InputAction.CallbackContext context);
            void OnAimRotation(InputAction.CallbackContext context);
            void OnAimFlags(InputAction.CallbackContext context);
            void OnPinchPosition(InputAction.CallbackContext context);
            void OnPokePosition(InputAction.CallbackContext context);
            void OnPokeRotation(InputAction.CallbackContext context);
            void OnGripPosition(InputAction.CallbackContext context);
            void OnGripRotation(InputAction.CallbackContext context);
        }
        public interface IXRIRightHandInteractionActions
        {
            void OnSelect(InputAction.CallbackContext context);
            void OnSelectValue(InputAction.CallbackContext context);
            void OnActivate(InputAction.CallbackContext context);
            void OnActivateValue(InputAction.CallbackContext context);
            void OnUIPress(InputAction.CallbackContext context);
            void OnUIPressValue(InputAction.CallbackContext context);
            void OnUIScroll(InputAction.CallbackContext context);
            void OnRotateAnchor(InputAction.CallbackContext context);
            void OnTranslateAnchor(InputAction.CallbackContext context);
            void OnScaleToggle(InputAction.CallbackContext context);
            void OnScaleDelta(InputAction.CallbackContext context);
            void OnMenu(InputAction.CallbackContext context);
            void OnAnimationWheel(InputAction.CallbackContext context);
        }
        public interface IXRIRightHandLocomotionActions
        {
            void OnTeleportSelect(InputAction.CallbackContext context);
            void OnTeleportModeActivate(InputAction.CallbackContext context);
            void OnTeleportModeCancel(InputAction.CallbackContext context);
            void OnTeleportDirection(InputAction.CallbackContext context);
            void OnTurn(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnGrabMove(InputAction.CallbackContext context);
            void OnSnapTurn(InputAction.CallbackContext context);
        }
        public interface IXRIUIActions
        {
            void OnNavigate(InputAction.CallbackContext context);
            void OnSubmit(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
            void OnPoint(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
            void OnScrollWheel(InputAction.CallbackContext context);
            void OnMiddleClick(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
        }
        public interface ITouchscreenGesturesActions
        {
            void OnTapStartPosition(InputAction.CallbackContext context);
            void OnDragCurrentPosition(InputAction.CallbackContext context);
            void OnDragDelta(InputAction.CallbackContext context);
            void OnPinchStartPosition(InputAction.CallbackContext context);
            void OnPinchGap(InputAction.CallbackContext context);
            void OnPinchGapDelta(InputAction.CallbackContext context);
            void OnTwistStartPosition(InputAction.CallbackContext context);
            void OnTwistDeltaRotation(InputAction.CallbackContext context);
            void OnScreenTouchCount(InputAction.CallbackContext context);
        }
        public interface IXRICalibrateActions
        {
            void OnCalibrate(InputAction.CallbackContext context);
        }
        public interface IXRIKeyboardActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnMenu(InputAction.CallbackContext context);
            void OnRecorder(InputAction.CallbackContext context);
            void OnInteraction(InputAction.CallbackContext context);
            void OnMute(InputAction.CallbackContext context);
            void OnAnimationWheel(InputAction.CallbackContext context);
        }
    }
}
